[{"path":"https://mmadoliat.github.io/MHPCA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 MHPCA authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mehdi Maadooliat. Author. Hossein Haghbin. Author, maintainer. Yue Zhao. Author. Soroush Mahmoudiandehkordi. Author.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Maadooliat M, Haghbin H, Zhao Y, Mahmoudiandehkordi S (2025). MHPCA: Multivariate Hybrid Principal Component Analysis. R package version 0.0.1, https://github.com/mmadoliat/MHPCA.","code":"@Manual{,   title = {MHPCA: Multivariate Hybrid Principal Component Analysis},   author = {Mehdi Maadooliat and Hossein Haghbin and Yue Zhao and Soroush Mahmoudiandehkordi},   year = {2025},   note = {R package version 0.0.1},   url = {https://github.com/mmadoliat/MHPCA}, }"},{"path":"https://mmadoliat.github.io/MHPCA/index.html","id":"multivariate-hybrid-pca-","dir":"","previous_headings":"","what":"Multivariate Hybrid Principal Component Analysis","title":"Multivariate Hybrid Principal Component Analysis","text":"MHPCA","code":""},{"path":"https://mmadoliat.github.io/MHPCA/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Multivariate Hybrid Principal Component Analysis","text":"MHPCA package","code":""},{"path":"https://mmadoliat.github.io/MHPCA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multivariate Hybrid Principal Component Analysis","text":"can install stable version gwid CRAN : Alternatively, can install stable version MHPCA :","code":"# install.packages(\"remotes\") remotes::install_github(\"mmadoliat/MHPCA\")"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/MotionSenseDataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Motion Sense Dataset: Measurements of user acceleration and pitch attitude collected by smartphones from 24 individuals performing four distinct activities: jogging, walking, sitting, and standing. — MotionSenseDataset","title":"Motion Sense Dataset: Measurements of user acceleration and pitch attitude collected by smartphones from 24 individuals performing four distinct activities: jogging, walking, sitting, and standing. — MotionSenseDataset","text":"dataset includes time-series data generated accelerometer gyroscope sensors. total 24 participants range gender, age, weight, height performed 4 activities environment conditions: downstairs, upstairs, walking, jogging, sitting, standing.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/MotionSenseDataset.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Motion Sense Dataset: Measurements of user acceleration and pitch attitude collected by smartphones from 24 individuals performing four distinct activities: jogging, walking, sitting, and standing. — MotionSenseDataset","text":"functional time series object class `funts` following fields:","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/MotionSenseDataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Motion Sense Dataset: Measurements of user acceleration and pitch attitude collected by smartphones from 24 individuals performing four distinct activities: jogging, walking, sitting, and standing. — MotionSenseDataset","text":"","code":"if (FALSE) { # \\dontrun{ # Load the Motion Sense Dataset data(\"motion_sense_data\") } # }"},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Set of Multidimensional Functional Basis — basismfd","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"`basismfd` class represents set  multidimensional basis functions. class utilizes basis objects `fda` package, B-splines Fourier bases. Constructor `basismfd` objects (Basismfd(...) )","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"","code":"Basismfd(...)  Basismfd(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"... list `basisfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"basis list basis objects `fda` package. dimSupp dimension support domain `basismfd` object. supp matrix representing ranges dimensions. gram Gram matrix. nbasis numeric vector containing number bases.","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"basismfd$new() basismfd$eval() basismfd$print() basismfd$clone()","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"constructor function objects class `basismfd` (Basismfd(...) )","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"","code":"basismfd$new(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"... list `basisfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"Evaluate `basismfd` object given argument values","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"","code":"basismfd$eval(evalarg)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"evalarg list numeric vectors argument values `basismfd` evaluated","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"list evaluated values","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"Print method `basismfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"","code":"basismfd$print(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"... Additional arguments passed `print` Getter setter `basis` field Getter setter `dimSupp` field Getter setter `nbasis` field Getter setter `supp` field Getter setter `gram` field","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"objects class cloneable method.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"","code":"basismfd$clone(deep = FALSE)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"deep Whether make deep clone.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/basismfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Set of Multidimensional Functional Basis — basismfd","text":"","code":"require(fda) #> Loading required package: fda #> Loading required package: splines #> Loading required package: fds #> Loading required package: rainbow #> Loading required package: MASS #> Loading required package: pcaPP #> Loading required package: RCurl #> Loading required package: deSolve #>  #> Attaching package: ‘fda’ #> The following object is masked from ‘package:graphics’: #>  #>     matplot #> The following object is masked from ‘package:datasets’: #>  #>     gait bs1 <- create.fourier.basis(c(0, 2 * pi), 5) bs2 <- create.bspline.basis(c(0, 1), 7) bs3 <- create.exponential.basis(c(0, 2), 3) # 1-D Basis ######## (similar to the fd features) mdbs1 <- Basismfd(bs1) mdbs1$basis #> [[1]] #> $call #> basisfd(type = type, rangeval = rangeval, nbasis = nbasis, params = params,  #>     dropind = dropind, quadvals = quadvals, values = values,  #>     basisvalues = basisvalues) #>  #> $type #> [1] \"fourier\" #>  #> $rangeval #> [1] 0.000000 6.283185 #>  #> $nbasis #> [1] 5 #>  #> $params #> [1] 6.283185 #>  #> $dropind #> numeric(0) #>  #> $quadvals #> NULL #>  #> $values #> list() #>  #> $basisvalues #> list() #>  #> $names #> [1] \"const\" \"sin1\"  \"cos1\"  \"sin2\"  \"cos2\"  #>  #> attr(,\"class\") #> [1] \"basisfd\" #>  mdbs1$dimSupp #> [1] 1 mdbs1$nbasis #> [1] 5 mdbs1$supp #>          [,1] #> [1,] 0.000000 #> [2,] 6.283185 mdbs1$gram #> 5 x 5 Matrix of class \"dsyMatrix\" #>               [,1]          [,2]          [,3]          [,4]          [,5] #> [1,]  1.000000e+00 -1.040211e-16 -1.382536e-16  8.367298e-17 -6.370014e-17 #> [2,] -1.040211e-16  1.000000e+00  3.690370e-17 -5.743803e-17 -1.355597e-16 #> [3,] -1.382536e-16  3.690370e-17  1.000000e+00 -1.432435e-16 -1.754345e-16 #> [4,]  8.367298e-17 -5.743803e-17 -1.432435e-16  9.999986e-01 -8.323824e-17 #> [5,] -6.370014e-17 -1.355597e-16 -1.754345e-16 -8.323824e-17  1.000001e+00 mdbs1$eval(1:7 / 10) #> [[1]] #>          const       sin1      cos1      sin2       cos2 #> [1,] 0.3989423 0.05632497 0.5613710 0.1120872 0.55294335 #> [2,] 0.3989423 0.11208717 0.5529434 0.2197058 0.51965302 #> [3,] 0.3989423 0.16672942 0.5389909 0.3185654 0.46564576 #> [4,] 0.3989423 0.21970577 0.5196530 0.4047248 0.39307467 #> [5,] 0.3989423 0.27048689 0.4951229 0.4747492 0.30483293 #> [6,] 0.3989423 0.31856540 0.4656458 0.5258467 0.20443847 #> [7,] 0.3989423 0.36346091 0.4315160 0.5559805 0.09589369 #>  image(as.matrix(mdbs1$gram))   ####### 2-D Basis ######## (fd cannot handle this) mdbs2 <- Basismfd(bs1, bs2) mdbs2$basis #> [[1]] #> $call #> basisfd(type = type, rangeval = rangeval, nbasis = nbasis, params = params,  #>     dropind = dropind, quadvals = quadvals, values = values,  #>     basisvalues = basisvalues) #>  #> $type #> [1] \"fourier\" #>  #> $rangeval #> [1] 0.000000 6.283185 #>  #> $nbasis #> [1] 5 #>  #> $params #> [1] 6.283185 #>  #> $dropind #> numeric(0) #>  #> $quadvals #> NULL #>  #> $values #> list() #>  #> $basisvalues #> list() #>  #> $names #> [1] \"const\" \"sin1\"  \"cos1\"  \"sin2\"  \"cos2\"  #>  #> attr(,\"class\") #> [1] \"basisfd\" #>  #> [[2]] #> $call #> basisfd(type = type, rangeval = rangeval, nbasis = nbasis, params = params,  #>     dropind = dropind, quadvals = quadvals, values = values,  #>     basisvalues = basisvalues) #>  #> $type #> [1] \"bspline\" #>  #> $rangeval #> [1] 0 1 #>  #> $nbasis #> [1] 7 #>  #> $params #> [1] 0.25 0.50 0.75 #>  #> $dropind #> NULL #>  #> $quadvals #> NULL #>  #> $values #> list() #>  #> $basisvalues #> list() #>  #> $names #> [1] \"bspl4.1\" \"bspl4.2\" \"bspl4.3\" \"bspl4.4\" \"bspl4.5\" \"bspl4.6\" \"bspl4.7\" #>  #> attr(,\"class\") #> [1] \"basisfd\" #>  mdbs2$dimSupp #> [1] 2 mdbs2$nbasis #> [1] 5 7 mdbs2$supp #>          [,1] [,2] #> [1,] 0.000000    0 #> [2,] 6.283185    1 dim(mdbs2$gram) #> [1] 35 35 arg_mdbs <- list(1:10, 1:9 / 10) mdbs2$eval(arg_mdbs) #> [[1]] #>           const        sin1       cos1       sin2        cos2 #>  [1,] 0.3989423  0.47474916  0.3048329  0.5130161 -0.23478571 #>  [2,] 0.3989423  0.51301614 -0.2347857 -0.4269801 -0.36877892 #>  [3,] 0.3989423  0.07961844 -0.5585435 -0.1576433  0.54171807 #>  [4,] 0.3989423 -0.42698008 -0.3687789  0.5581856 -0.08208960 #>  [5,] 0.3989423 -0.54101509  0.1600393 -0.3069310 -0.47339542 #>  [6,] 0.3989423 -0.15764331  0.5417181 -0.3027289  0.47609361 #>  [7,] 0.3989423  0.37066500  0.4253438  0.5588904  0.07714571 #>  [8,] 0.3989423  0.55818562 -0.0820896 -0.1624321 -0.54030150 #>  [9,] 0.3989423  0.23251296 -0.5140502 -0.4236992  0.37254381 #> [10,] 0.3989423 -0.30693104 -0.4733954  0.5150742  0.23023565 #>  #> [[2]] #>       bspl4.1 bspl4.2     bspl4.3    bspl4.4     bspl4.5 bspl4.6 bspl4.7 #>  [1,]   0.216   0.592 0.181333333 0.01066667 0.000000000   0.000   0.000 #>  [2,]   0.008   0.416 0.490666667 0.08533333 0.000000000   0.000   0.000 #>  [3,]   0.000   0.128 0.588000000 0.28266667 0.001333333   0.000   0.000 #>  [4,]   0.000   0.016 0.409333333 0.53866667 0.036000000   0.000   0.000 #>  [5,]   0.000   0.000 0.166666667 0.66666667 0.166666667   0.000   0.000 #>  [6,]   0.000   0.000 0.036000000 0.53866667 0.409333333   0.016   0.000 #>  [7,]   0.000   0.000 0.001333333 0.28266667 0.588000000   0.128   0.000 #>  [8,]   0.000   0.000 0.000000000 0.08533333 0.490666667   0.416   0.008 #>  [9,]   0.000   0.000 0.000000000 0.01066667 0.181333333   0.592   0.216 #>  image(as.matrix(mdbs2$gram))"},{"path":"https://mmadoliat.github.io/MHPCA/reference/bimfdplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate plot for `hd` objects — bimfdplot","title":"Bivariate plot for `hd` objects — bimfdplot","text":"Bivariate plot `hd` objects Bivariate plot `mvmfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/bimfdplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate plot for `hd` objects — bimfdplot","text":"","code":"bimfdplot(mvmfd_obj, type = \"l\", lty = 1, xlab = \"\", ylab = \"\", main = \"\", ...)  bimfdplot(mvmfd_obj, type = \"l\", lty = 1, xlab = \"\", ylab = \"\", main = \"\", ...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/bimfdplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate plot for `hd` objects — bimfdplot","text":"mvmfd_obj `mvmfd` object type Type plot ('l' lines, 'p' points, etc.) lty Line type xlab Label x-axis ylab Label y-axis main Main title ... Additional arguments matplot function hd_obj `hd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/cash-.nfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor for nfd Class — $.nfd","title":"Accessor for nfd Class — $.nfd","text":"Accessor nfd Class","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/cash-.nfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor for nfd Class — $.nfd","text":"","code":"# S3 method for class 'nfd' x$name"},{"path":"https://mmadoliat.github.io/MHPCA/reference/cash-.nfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor for nfd Class — $.nfd","text":"x object class `nfd`. name name element access.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/cash-.nfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor for nfd Class — $.nfd","text":"requested element `NULL` exist.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/cash-.nfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor for nfd Class — $.nfd","text":"","code":"mat <- matrix(1:9, nrow = 3) nfd_obj <- nfd(mat) nfd_obj$nobs # Returns 3 #> [1] 3"},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Subtraction of two `hd` objects — -.hd","title":"Subtraction of two `hd` objects — -.hd","text":"Subtraction two `hd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subtraction of two `hd` objects — -.hd","text":"","code":"# S3 method for class 'hd' obj1 - NULL"},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subtraction of two `hd` objects — -.hd","text":"obj1 `hd` object obj2 optional `hd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subtraction of two `hd` objects — -.hd","text":"`hd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Subtract two `mfd` objects — -.mfd","title":"Subtract two `mfd` objects — -.mfd","text":"Subtract two `mfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subtract two `mfd` objects — -.mfd","text":"","code":"# S3 method for class 'mfd' obj1 - NULL"},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subtract two `mfd` objects — -.mfd","text":"obj1 `mfd` object obj2 `mfd` object scalar","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subtract two `mfd` objects — -.mfd","text":"difference two `mfd` objects","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mvmfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Subtraction of two `mvmfd` objects — -.mvmfd","title":"Subtraction of two `mvmfd` objects — -.mvmfd","text":"Subtraction two `mvmfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mvmfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subtraction of two `mvmfd` objects — -.mvmfd","text":"","code":"# S3 method for class 'mvmfd' obj1 - NULL"},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mvmfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subtraction of two `mvmfd` objects — -.mvmfd","text":"obj1 `mvmfd` object obj2 optional `mvmfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mvmfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subtraction of two `mvmfd` objects — -.mvmfd","text":"`mvmfd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mvnfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Subtraction of two `mvnfd` objects — -.mvnfd","title":"Subtraction of two `mvnfd` objects — -.mvnfd","text":"Subtraction two `mvnfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mvnfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subtraction of two `mvnfd` objects — -.mvnfd","text":"","code":"# S3 method for class 'mvnfd' obj1 - NULL"},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mvnfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subtraction of two `mvnfd` objects — -.mvnfd","text":"obj1 `mvnfd` object obj2 optional `mvnfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/dot-mvnfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subtraction of two `mvnfd` objects — -.mvnfd","text":"`mvnfd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Set of Hybrid Data objects — hd","title":"Define a Set of Hybrid Data objects — hd","text":"`hd` class represents functional data ... Constructor `hd` objects (`Hd`)","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Hybrid Data objects — hd","text":"","code":"Hd(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Hybrid Data objects — hd","text":"... `mfd` objects separated comma","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Define a Set of Hybrid Data objects — hd","text":"mf `mvmfd` object nf `mvnfd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Define a Set of Hybrid Data objects — hd","text":"hd$new() hd$eval() hd$print() hd$clone()","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Define a Set of Hybrid Data objects — hd","text":"Constructor `hd` objects ('Hd')","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Hybrid Data objects — hd","text":"","code":"hd$new(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Hybrid Data objects — hd","text":"... `mfd` `nfd` objects separated comma","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"Define a Set of Hybrid Data objects — hd","text":"Eval method `hd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Hybrid Data objects — hd","text":"","code":"hd$eval(evalarg)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Hybrid Data objects — hd","text":"evalarg list numeric vectors argument values `hd` evaluated.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Define a Set of Hybrid Data objects — hd","text":"list evaluated values","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Define a Set of Hybrid Data objects — hd","text":"Print method `hd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Hybrid Data objects — hd","text":"","code":"hd$print(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Hybrid Data objects — hd","text":"... Additional arguments passed `print`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Define a Set of Hybrid Data objects — hd","text":"objects class cloneable method.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Hybrid Data objects — hd","text":"","code":"hd$clone(deep = FALSE)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Hybrid Data objects — hd","text":"deep Whether make deep clone.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/hd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Set of Hybrid Data objects — hd","text":"","code":"require(fda) bs1 <- create.fourier.basis(c(0, 2 * pi), 5) bs2 <- create.bspline.basis(c(0, 1), 7) bs3 <- create.exponential.basis(c(0, 2), 3) nobs <- 10 argval1 <- seq(0, 2 * pi, length.out = 12) X1 <- outer(sin(argval1), seq(0.5, 1.5, length.out = nobs)) mdbs1 <- Basismfd(bs1) mfd1 <- Mfd(argval1, X1, mdbs1) mdbs2 <- Basismfd(bs1) argval2 <- argval1 X2 <- outer(cos(argval2), seq(0.2, 1.5, length.out = nobs)) mfd2 <- Mfd(argval2, X2, mdbs1) hd1 <- Hd(mfd1, mfd2) hd1[1] #> An 'hd' object contains: #> A 'mvmfd' object with 2 variable(s): #>  #> Variable 1: #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  #> Variable 2: #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  hd1[1, 1] #> An 'hd' object contains: #> A 'mvmfd' object with 2 variable(s): #>  #> Variable 1: #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  #> Variable 2: #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  hd1[1:5, 2] #> Error in `[.hd`(hd1, 1:5, 2):  subscript j out of bounds hd1[, 1] #> An 'hd' object contains: #> A 'mvmfd' object with 2 variable(s): #>  #> Variable 1: #> A 1-Dimensional 'mfd' object: #> nobs: 10  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  #> Variable 2: #> A 1-Dimensional 'mfd' object: #> nobs: 10  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  hd1[1:5, ] #> An 'hd' object contains: #> A 'mvmfd' object with 2 variable(s): #>  #> Variable 1: #> A 1-Dimensional 'mfd' object: #> nobs: 5  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  #> Variable 2: #> A 1-Dimensional 'mfd' object: #> nobs: 5  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  evalarg <- list(argval1, argval2) hd1$eval(evalarg) #> $fd1 #>                [,1]          [,2]          [,3]          [,4]          [,5] #>  [1,]  1.175889e-17 -5.566336e-17 -5.989427e-17 -8.533914e-18  4.282644e-17 #>  [2,]  2.703204e-01  3.303916e-01  3.904628e-01  4.505340e-01  5.106052e-01 #>  [3,]  4.548160e-01  5.558862e-01  6.569564e-01  7.580267e-01  8.590969e-01 #>  [4,]  4.949107e-01  6.048909e-01  7.148710e-01  8.248512e-01  9.348314e-01 #>  [5,]  3.778748e-01  4.618470e-01  5.458191e-01  6.297913e-01  7.137635e-01 #>  [6,]  1.408663e-01  1.721699e-01  2.034735e-01  2.347771e-01  2.660807e-01 #>  [7,] -1.408663e-01 -1.721699e-01 -2.034735e-01 -2.347771e-01 -2.660807e-01 #>  [8,] -3.778748e-01 -4.618470e-01 -5.458191e-01 -6.297913e-01 -7.137635e-01 #>  [9,] -4.949107e-01 -6.048909e-01 -7.148710e-01 -8.248512e-01 -9.348314e-01 #> [10,] -4.548160e-01 -5.558862e-01 -6.569564e-01 -7.580267e-01 -8.590969e-01 #> [11,] -2.703204e-01 -3.303916e-01 -3.904628e-01 -4.505340e-01 -5.106052e-01 #> [12,] -1.107058e-16 -2.053424e-16 -2.367877e-16 -2.126417e-16 -1.884957e-16 #>                [,6]          [,7]          [,8]          [,9]         [,10] #>  [1,] -8.600566e-18 -8.939168e-17  2.572277e-17 -1.368147e-17 -1.293677e-16 #>  [2,]  5.706764e-01  6.307476e-01  6.908188e-01  7.508900e-01  8.109612e-01 #>  [3,]  9.601671e-01  1.061237e+00  1.162308e+00  1.263378e+00  1.364448e+00 #>  [4,]  1.044812e+00  1.154792e+00  1.264772e+00  1.374752e+00  1.484732e+00 #>  [5,]  7.977357e-01  8.817078e-01  9.656800e-01  1.049652e+00  1.133624e+00 #>  [6,]  2.973844e-01  3.286880e-01  3.599916e-01  3.912952e-01  4.225988e-01 #>  [7,] -2.973844e-01 -3.286880e-01 -3.599916e-01 -3.912952e-01 -4.225988e-01 #>  [8,] -7.977357e-01 -8.817078e-01 -9.656800e-01 -1.049652e+00 -1.133624e+00 #>  [9,] -1.044812e+00 -1.154792e+00 -1.264772e+00 -1.374752e+00 -1.484732e+00 #> [10,] -9.601671e-01 -1.061237e+00 -1.162308e+00 -1.263378e+00 -1.364448e+00 #> [11,] -5.706764e-01 -6.307476e-01 -6.908188e-01 -7.508900e-01 -8.109612e-01 #> [12,] -2.671371e-16 -3.751426e-16 -2.872425e-16 -3.538611e-16 -4.967617e-16 #>  #> $fd2 #>              [,1]        [,2]        [,3]        [,4]       [,5]       [,6] #>  [1,]  0.20000000  0.34444444  0.48888889  0.63333333  0.7777778  0.9222222 #>  [2,]  0.16825071  0.28976511  0.41127950  0.53279390  0.6543083  0.7758227 #>  [3,]  0.08308300  0.14308739  0.20309178  0.26309617  0.3231006  0.3831050 #>  [4,] -0.02846297 -0.04901956 -0.06957614 -0.09013273 -0.1106893 -0.1312459 #>  [5,] -0.13097215 -0.22556314 -0.32015414 -0.41474513 -0.5093361 -0.6039271 #>  [6,] -0.19189859 -0.33049202 -0.46908545 -0.60767888 -0.7462723 -0.8848657 #>  [7,] -0.19189859 -0.33049202 -0.46908545 -0.60767888 -0.7462723 -0.8848657 #>  [8,] -0.13097215 -0.22556314 -0.32015414 -0.41474513 -0.5093361 -0.6039271 #>  [9,] -0.02846297 -0.04901956 -0.06957614 -0.09013273 -0.1106893 -0.1312459 #> [10,]  0.08308300  0.14308739  0.20309178  0.26309617  0.3231006  0.3831050 #> [11,]  0.16825071  0.28976511  0.41127950  0.53279390  0.6543083  0.7758227 #> [12,]  0.20000000  0.34444444  0.48888889  0.63333333  0.7777778  0.9222222 #>             [,7]       [,8]       [,9]      [,10] #>  [1,]  1.0666667  1.2111111  1.3555556  1.5000000 #>  [2,]  0.8973371  1.0188515  1.1403659  1.2618803 #>  [3,]  0.4431093  0.5031137  0.5631181  0.6231225 #>  [4,] -0.1518025 -0.1723591 -0.1929157 -0.2134723 #>  [5,] -0.6985181 -0.7931091 -0.8877001 -0.9822911 #>  [6,] -1.0234592 -1.1620526 -1.3006460 -1.4392395 #>  [7,] -1.0234592 -1.1620526 -1.3006460 -1.4392395 #>  [8,] -0.6985181 -0.7931091 -0.8877001 -0.9822911 #>  [9,] -0.1518025 -0.1723591 -0.1929157 -0.2134723 #> [10,]  0.4431093  0.5031137  0.5631181  0.6231225 #> [11,]  0.8973371  1.0188515  1.1403659  1.2618803 #> [12,]  1.0666667  1.2111111  1.3555556  1.5000000 #>  hd1 + hd1 #> An 'hd' object contains: #> A 'mvmfd' object with 2 variable(s): #>  #> Variable 1: #> A 1-Dimensional 'mfd' object: #> nobs: 10  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  #> Variable 2: #> A 1-Dimensional 'mfd' object: #> nobs: 10  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  mean(hd1) #> An 'hd' object contains: #> A 'mvmfd' object with 2 variable(s): #>  #> Variable 1: #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  #> Variable 2: #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  inprod_hd(hd1, hd1) #>           [,1]     [,2]     [,3]     [,4]     [,5]     [,6]      [,7]      [,8] #>  [1,] 0.911061 1.176351 1.441641 1.706931 1.972221 2.237511  2.502801  2.768090 #>  [2,] 1.176351 1.545973 1.915595 2.285217 2.654838 3.024460  3.394082  3.763704 #>  [3,] 1.441641 1.915595 2.389548 2.863502 3.337456 3.811410  4.285364  4.759318 #>  [4,] 1.706931 2.285217 2.863502 3.441788 4.020074 4.598360  5.176645  5.754931 #>  [5,] 1.972221 2.654838 3.337456 4.020074 4.702691 5.385309  6.067927  6.750545 #>  [6,] 2.237511 3.024460 3.811410 4.598360 5.385309 6.172259  6.959208  7.746158 #>  [7,] 2.502801 3.394082 4.285364 5.176645 6.067927 6.959208  7.850490  8.741772 #>  [8,] 2.768090 3.763704 4.759318 5.754931 6.750545 7.746158  8.741772  9.737385 #>  [9,] 3.033380 4.133326 5.233271 6.333217 7.433162 8.533108  9.633053 10.732999 #> [10,] 3.298670 4.502948 5.707225 6.911503 8.115780 9.320057 10.524335 11.728612 #>            [,9]     [,10] #>  [1,]  3.033380  3.298670 #>  [2,]  4.133326  4.502948 #>  [3,]  5.233271  5.707225 #>  [4,]  6.333217  6.911503 #>  [5,]  7.433162  8.115780 #>  [6,]  8.533108  9.320057 #>  [7,]  9.633053 10.524335 #>  [8,] 10.732999 11.728612 #>  [9,] 11.832944 12.932890 #> [10,] 12.932890 14.137167 norm_hd(hd1) #>           [,1]     [,2]     [,3]     [,4]     [,5]     [,6]      [,7]      [,8] #>  [1,] 0.911061 1.176351 1.441641 1.706931 1.972221 2.237511  2.502801  2.768090 #>  [2,] 1.176351 1.545973 1.915595 2.285217 2.654838 3.024460  3.394082  3.763704 #>  [3,] 1.441641 1.915595 2.389548 2.863502 3.337456 3.811410  4.285364  4.759318 #>  [4,] 1.706931 2.285217 2.863502 3.441788 4.020074 4.598360  5.176645  5.754931 #>  [5,] 1.972221 2.654838 3.337456 4.020074 4.702691 5.385309  6.067927  6.750545 #>  [6,] 2.237511 3.024460 3.811410 4.598360 5.385309 6.172259  6.959208  7.746158 #>  [7,] 2.502801 3.394082 4.285364 5.176645 6.067927 6.959208  7.850490  8.741772 #>  [8,] 2.768090 3.763704 4.759318 5.754931 6.750545 7.746158  8.741772  9.737385 #>  [9,] 3.033380 4.133326 5.233271 6.333217 7.433162 8.533108  9.633053 10.732999 #> [10,] 3.298670 4.502948 5.707225 6.911503 8.115780 9.320057 10.524335 11.728612 #>            [,9]     [,10] #>  [1,]  3.033380  3.298670 #>  [2,]  4.133326  4.502948 #>  [3,]  5.233271  5.707225 #>  [4,]  6.333217  6.911503 #>  [5,]  7.433162  8.115780 #>  [6,]  8.533108  9.320057 #>  [7,]  9.633053 10.524335 #>  [8,] 10.732999 11.728612 #>  [9,] 11.832944 12.932890 #> [10,] 12.932890 14.137167 plot(hd1)  bimfdplot(hd1) #> Error in seq.default(supp[1, 1], supp[2, 1], len = 1000): 'from' must be of length 1"},{"path":"https://mmadoliat.github.io/MHPCA/reference/img.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Grayscale Image Class for Multidimensional Non-Functional Data — img","title":"Define a Grayscale Image Class for Multidimensional Non-Functional Data — img","text":"`img` class represents grayscale image data specialized form `nfd`. converts one multiple 2D matrices grayscale images `imager` package 2-dimensional matrix row corresponds vectorized image.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/img.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Grayscale Image Class for Multidimensional Non-Functional Data — img","text":"","code":"img(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/img.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Grayscale Image Class for Multidimensional Non-Functional Data — img","text":"... grayscale image object (`imager` package `cimg`, 2D matrix/array), single list containing objects.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/img.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Grayscale Image Class for Multidimensional Non-Functional Data — img","text":"object class `img`, `nfd`, `matrix`, `array`. multiple images provided,         returned matrix multiple rows, representing vectorized image.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/img.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Grayscale Image Class for Multidimensional Non-Functional Data — img","text":"","code":"if (FALSE) { # \\dontrun{ library(imager)  # Single image as separate argument img_cimg1 <- load.example(\"lena\") %>% grayscale() img_obj1 <- img(img_cimg1) print(img_obj1) class(img_obj1)  # Multiple images as separate arguments img_cimg2 <- load.example(\"boats\") %>% grayscale() img_cimg3 <- load.example(\"peppers\") %>% grayscale() img_obj2 <- img(img_cimg1, img_cimg2, img_cimg3) print(img_obj2) class(img_obj2)  # Multiple images as a list img_list <- list(img_cimg1, img_cimg2, img_cimg3) img_obj3 <- img(img_list) print(img_obj3) class(img_obj3) } # }"},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inner product between two objects of class `hd` — inprod_hd","title":"Compute the inner product between two objects of class `hd` — inprod_hd","text":"Compute inner product two objects class `hd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inner product between two objects of class `hd` — inprod_hd","text":"","code":"inprod_hd(hd_obj1, hd_obj2)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the inner product between two objects of class `hd` — inprod_hd","text":"hd_obj1 `hd` object hd_obj2 `hd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the inner product between two objects of class `hd` — inprod_hd","text":"inner products matrix two `hd` objects","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inner product between two objects of class `mfd` — inprod_mfd","title":"Compute the inner product between two objects of class `mfd` — inprod_mfd","text":"Compute inner product two objects class `mfd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inner product between two objects of class `mfd` — inprod_mfd","text":"","code":"inprod_mfd(mfd_obj1, mfd_obj2)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the inner product between two objects of class `mfd` — inprod_mfd","text":"mfd_obj1 `mfd` object mfd_obj2 `mfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the inner product between two objects of class `mfd` — inprod_mfd","text":"inner products matrix two `mfd` objects","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mvmfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inner product between two objects of class `mvmfd` — inprod_mvmfd","title":"Compute the inner product between two objects of class `mvmfd` — inprod_mvmfd","text":"Compute inner product two objects class `mvmfd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mvmfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inner product between two objects of class `mvmfd` — inprod_mvmfd","text":"","code":"inprod_mvmfd(mvmfd_obj1, mvmfd_obj2)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mvmfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the inner product between two objects of class `mvmfd` — inprod_mvmfd","text":"mvmfd_obj1 `mvmfd` object mvmfd_obj2 `mvmfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mvmfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the inner product between two objects of class `mvmfd` — inprod_mvmfd","text":"inner products matrix two `mvmfd` objects","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mvnfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inner product between two objects of class `mvnfd` — inprod_mvnfd","title":"Compute the inner product between two objects of class `mvnfd` — inprod_mvnfd","text":"Compute inner product two objects class `mvnfd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mvnfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inner product between two objects of class `mvnfd` — inprod_mvnfd","text":"","code":"inprod_mvnfd(mvnfd_obj1, mvnfd_obj2)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mvnfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the inner product between two objects of class `mvnfd` — inprod_mvnfd","text":"mvnfd_obj1 `mvnfd` object mvnfd_obj2 `mvnfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_mvnfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the inner product between two objects of class `mvnfd` — inprod_mvnfd","text":"inner products matrix two `mvnfd` objects","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_nfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inner product between two objects of class `nfd` — inprod_nfd","title":"Compute the inner product between two objects of class `nfd` — inprod_nfd","text":"Compute inner product two objects class `nfd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_nfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inner product between two objects of class `nfd` — inprod_nfd","text":"","code":"inprod_nfd(nfd_obj1, nfd_obj2)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_nfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the inner product between two objects of class `nfd` — inprod_nfd","text":"nfd_obj1 `nfd` object nfd_obj2 `nfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/inprod_nfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the inner product between two objects of class `nfd` — inprod_nfd","text":"inner products matrix two `nfd` objects","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.basismfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is of class 'basismfd' — is.basismfd","title":"Check if an object is of class 'basismfd' — is.basismfd","text":"Check object class 'basismfd'","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.basismfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is of class 'basismfd' — is.basismfd","text":"","code":"is.basismfd(fdobj)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.basismfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is of class 'basismfd' — is.basismfd","text":"fdobj object check.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.basismfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is of class 'basismfd' — is.basismfd","text":"TRUE object class 'basismfd', FALSE otherwise.","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is of class 'hd' — is.hd","title":"Check if an object is of class 'hd' — is.hd","text":"Check object class 'hd'","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is of class 'hd' — is.hd","text":"","code":"is.hd(obj)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is of class 'hd' — is.hd","text":"obj object check.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is of class 'hd' — is.hd","text":"TRUE object class 'hd', FALSE otherwise.","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is of class 'mfd' — is.mfd","title":"Check if an object is of class 'mfd' — is.mfd","text":"Check object class 'mfd'","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is of class 'mfd' — is.mfd","text":"","code":"is.mfd(fdobj)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is of class 'mfd' — is.mfd","text":"fdobj object check.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is of class 'mfd' — is.mfd","text":"TRUE object class 'mfd', FALSE otherwise.","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvbasismfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is of class 'mvbasismfd' — is.mvbasismfd","title":"Check if an object is of class 'mvbasismfd' — is.mvbasismfd","text":"Check object class 'mvbasismfd'","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvbasismfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is of class 'mvbasismfd' — is.mvbasismfd","text":"","code":"is.mvbasismfd(fdobj)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvbasismfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is of class 'mvbasismfd' — is.mvbasismfd","text":"fdobj object check.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvbasismfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is of class 'mvbasismfd' — is.mvbasismfd","text":"TRUE object class 'mvbasismfd', FALSE otherwise.","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvmfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is of class 'mvmfd' — is.mvmfd","title":"Check if an object is of class 'mvmfd' — is.mvmfd","text":"Check object class 'mvmfd'","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvmfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is of class 'mvmfd' — is.mvmfd","text":"","code":"is.mvmfd(fdobj)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvmfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is of class 'mvmfd' — is.mvmfd","text":"fdobj object check.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvmfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is of class 'mvmfd' — is.mvmfd","text":"TRUE object class 'mvmfd', FALSE otherwise.","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvnfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is of class 'mvnfd' — is.mvnfd","title":"Check if an object is of class 'mvnfd' — is.mvnfd","text":"Check object class 'mvnfd'","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvnfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is of class 'mvnfd' — is.mvnfd","text":"","code":"is.mvnfd(obj)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvnfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is of class 'mvnfd' — is.mvnfd","text":"obj object check.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.mvnfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is of class 'mvnfd' — is.mvnfd","text":"TRUE object class 'mvnfd', FALSE otherwise.","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.nfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is of class 'nfd' — is.nfd","title":"Check if an object is of class 'nfd' — is.nfd","text":"Check object class 'nfd'","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.nfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is of class 'nfd' — is.nfd","text":"","code":"is.nfd(obj)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.nfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is of class 'nfd' — is.nfd","text":"obj object check.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/is.nfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is of class 'nfd' — is.nfd","text":"TRUE object class 'nfd', FALSE otherwise.","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/length.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of an object of classes `mfd`, `mvmfd`, `nfd` or `hd`. — length","title":"Length of an object of classes `mfd`, `mvmfd`, `nfd` or `hd`. — length","text":"Length object object classes `mfd`, `mvmfd`,`nfd` `hd`.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of an object of classes `mfd`, `mvmfd`, `nfd` or `hd`. — length","text":"","code":"length(x, ...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of an object of classes `mfd`, `mvmfd`, `nfd` or `hd`. — length","text":"x object classes `mfd`, `mvmfd`, `nfd` `hd`. ... `length` function arguments.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mean.html","id":null,"dir":"Reference","previous_headings":"","what":"mean of an object of classes `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` or `hd`. — mean","title":"mean of an object of classes `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` or `hd`. — mean","text":"mean object classes `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` `hd`.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mean of an object of classes `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` or `hd`. — mean","text":"","code":"mean(x, ...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mean of an object of classes `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` or `hd`. — mean","text":"x object classes `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` `hd`. ... `mean` function arguments.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"mean of an object of classes `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` or `hd`. — mean","text":"object class `mfd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Set of Multidimensional Functional Data objects — mfd","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"`mfd` class represents set multidimensional functional data `basismfd` object. Functional data objects constructed specifying set basis functions set coefficients defining linear combination basis functions. Constructor `mfd` objects (Mfd(...) )","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"","code":"Mfd(argval = NULL, X, mdbs, method = \"data\")"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"argval list numeric vectors argument values `mfd` object evaluated X numeric matrix corresponds basis expansion coefficients `method=\"coefs\"` discrete observations `method=\"data\"`. mdbs basismfd object method determine `X` matrix type \"coefs\" \"data\".","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"basis object class `basismfd`. coefs matrix coefficients. nobs number observation","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"mfd$new() mfd$eval() mfd$print() mfd$clone()","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"Constructor `mfd` objects (Mfd(...) )","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"","code":"mfd$new(argval = NULL, X, mdbs, method = \"data\")"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"argval list numeric vectors argument values `mfd` object evaluated X numeric matrix corresponds basis expansion coefficients `method=\"coefs\"` discrete observations `method=\"data\"`. mdbs basismfd object method determine `X` matrix type \"coefs\" \"data\".","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"Evaluation `mfd` object arguments.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"","code":"mfd$eval(evalarg)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"evalarg list numeric vector argument values mfd evaluated.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"matrix evaluated values","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"Print method `mfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"","code":"mfd$print(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"... Additional arguments passed `print`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"objects class cloneable method.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"","code":"mfd$clone(deep = FALSE)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"deep Whether make deep clone.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Set of Multidimensional Functional Data objects — mfd","text":"","code":"require(fda) bs1 <- create.fourier.basis(c(0,2*pi),5) bs2 <- create.bspline.basis(c(0,1),7) bs3 <- create.exponential.basis(c(0,2),3)  #1-D mfd :_____________________________ argval <- seq(0,2*pi,length.out=100) nobs <- 10; X <- outer(sin(argval),seq(0.5,1.5,length.out=nobs)) mdbs1 <- Basismfd(bs1) mfd1 <- Mfd(X=X, mdbs = mdbs1) inprod_mfd(mfd1,mfd1) #>            [,1]      [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8] #>  [1,] 0.7853971 0.9599298 1.134462 1.308995 1.483528 1.658060 1.832593 2.007126 #>  [2,] 0.9599298 1.1732475 1.386565 1.599883 1.813201 2.026518 2.239836 2.453154 #>  [3,] 1.1344624 1.3865652 1.638668 1.890771 2.142874 2.394976 2.647079 2.899182 #>  [4,] 1.3089951 1.5998829 1.890771 2.181659 2.472546 2.763434 3.054322 3.345210 #>  [5,] 1.4835278 1.8132007 2.142874 2.472546 2.802219 3.131892 3.461565 3.791238 #>  [6,] 1.6580605 2.0265184 2.394976 2.763434 3.131892 3.500350 3.868808 4.237266 #>  [7,] 1.8325932 2.2398361 2.647079 3.054322 3.461565 3.868808 4.276051 4.683294 #>  [8,] 2.0071259 2.4531538 2.899182 3.345210 3.791238 4.237266 4.683294 5.129322 #>  [9,] 2.1816585 2.6664716 3.151285 3.636098 4.120911 4.605724 5.090537 5.575350 #> [10,] 2.3561912 2.8797893 3.403387 3.926985 4.450583 4.974181 5.497780 6.021378 #>           [,9]    [,10] #>  [1,] 2.181659 2.356191 #>  [2,] 2.666472 2.879789 #>  [3,] 3.151285 3.403387 #>  [4,] 3.636098 3.926985 #>  [5,] 4.120911 4.450583 #>  [6,] 4.605724 4.974181 #>  [7,] 5.090537 5.497780 #>  [8,] 5.575350 6.021378 #>  [9,] 6.060163 6.544976 #> [10,] 6.544976 7.068574 norm_mfd(mfd1) #>  [1] 0.8862263 1.0831655 1.2801047 1.4770439 1.6739830 1.8709222 2.0678614 #>  [8] 2.2648006 2.4617398 2.6586789 mfd0 <- 2.5*mfd1 mfd1-mfd0 #> A 1-Dimensional 'mfd' object: #> nobs: 10  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  mfd1[1:3] #> A 1-Dimensional 'mfd' object: #> nobs: 3  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185   mfd1$eval(argval) #>                 [,1]          [,2]          [,3]          [,4]          [,5] #>   [1,]  9.749324e-18  6.697330e-17 -1.247353e-16  3.392640e-17 -1.465435e-16 #>   [2,]  3.171196e-02  3.875906e-02  4.580616e-02  5.285327e-02  5.990037e-02 #>   [3,]  6.329623e-02  7.736205e-02  9.142788e-02  1.054937e-01  1.195595e-01 #>   [4,]  9.462562e-02  1.156535e-01  1.366815e-01  1.577094e-01  1.787373e-01 #>   [5,]  1.255740e-01  1.534793e-01  1.813847e-01  2.092900e-01  2.371953e-01 #>   [6,]  1.560167e-01  1.906871e-01  2.253575e-01  2.600279e-01  2.946983e-01 #>   [7,]  1.858312e-01  2.271271e-01  2.684229e-01  3.097187e-01  3.510145e-01 #>   [8,]  2.148975e-01  2.626524e-01  3.104074e-01  3.581624e-01  4.059174e-01 #>   [9,]  2.430984e-01  2.971202e-01  3.511421e-01  4.051639e-01  4.591858e-01 #>  [10,]  2.703204e-01  3.303916e-01  3.904628e-01  4.505340e-01  5.106052e-01 #>  [11,]  2.964540e-01  3.623326e-01  4.282113e-01  4.940899e-01  5.599686e-01 #>  [12,]  3.213938e-01  3.928147e-01  4.642355e-01  5.356563e-01  6.070772e-01 #>  [13,]  3.450395e-01  4.217150e-01  4.983904e-01  5.750658e-01  6.517413e-01 #>  [14,]  3.672959e-01  4.489172e-01  5.305385e-01  6.121598e-01  6.937811e-01 #>  [15,]  3.880732e-01  4.743117e-01  5.605502e-01  6.467887e-01  7.330272e-01 #>  [16,]  4.072880e-01  4.977964e-01  5.883049e-01  6.788133e-01  7.693217e-01 #>  [17,]  4.248627e-01  5.192767e-01  6.136906e-01  7.081045e-01  8.025185e-01 #>  [18,]  4.407267e-01  5.386659e-01  6.366052e-01  7.345445e-01  8.324837e-01 #>  [19,]  4.548160e-01  5.558862e-01  6.569564e-01  7.580267e-01  8.590969e-01 #>  [20,]  4.670739e-01  5.708681e-01  6.746623e-01  7.784566e-01  8.822508e-01 #>  [21,]  4.774511e-01  5.835514e-01  6.896516e-01  7.957519e-01  9.018521e-01 #>  [22,]  4.859058e-01  5.938848e-01  7.018639e-01  8.098430e-01  9.178220e-01 #>  [23,]  4.924039e-01  6.018270e-01  7.112500e-01  8.206731e-01  9.300962e-01 #>  [24,]  4.969192e-01  6.073457e-01  7.177722e-01  8.281987e-01  9.386252e-01 #>  [25,]  4.994337e-01  6.104189e-01  7.214042e-01  8.323894e-01  9.433747e-01 #>  [26,]  4.999371e-01  6.110342e-01  7.221313e-01  8.332284e-01  9.443256e-01 #>  [27,]  4.984274e-01  6.091890e-01  7.199507e-01  8.307123e-01  9.414740e-01 #>  [28,]  4.949107e-01  6.048909e-01  7.148710e-01  8.248512e-01  9.348314e-01 #>  [29,]  4.894012e-01  5.981571e-01  7.069129e-01  8.156687e-01  9.244245e-01 #>  [30,]  4.819211e-01  5.890147e-01  6.961082e-01  8.032018e-01  9.102954e-01 #>  [31,]  4.725004e-01  5.775005e-01  6.825006e-01  7.875007e-01  8.925008e-01 #>  [32,]  4.611771e-01  5.636610e-01  6.661448e-01  7.686286e-01  8.711124e-01 #>  [33,]  4.479969e-01  5.475518e-01  6.471066e-01  7.466615e-01  8.462163e-01 #>  [34,]  4.330127e-01  5.292377e-01  6.254628e-01  7.216878e-01  8.179129e-01 #>  [35,]  4.162849e-01  5.087927e-01  6.013005e-01  6.938082e-01  7.863160e-01 #>  [36,]  3.978809e-01  4.862989e-01  5.747169e-01  6.631349e-01  7.515528e-01 #>  [37,]  3.778748e-01  4.618470e-01  5.458191e-01  6.297913e-01  7.137635e-01 #>  [38,]  3.563471e-01  4.355353e-01  5.147236e-01  5.939118e-01  6.731001e-01 #>  [39,]  3.333845e-01  4.074699e-01  4.815554e-01  5.556408e-01  6.297263e-01 #>  [40,]  3.090795e-01  3.777638e-01  4.464482e-01  5.151325e-01  5.838168e-01 #>  [41,]  2.835299e-01  3.465366e-01  4.095432e-01  4.725499e-01  5.355565e-01 #>  [42,]  2.568387e-01  3.139140e-01  3.709892e-01  4.280645e-01  4.851398e-01 #>  [43,]  2.291133e-01  2.800273e-01  3.309414e-01  3.818554e-01  4.327695e-01 #>  [44,]  2.004653e-01  2.450131e-01  2.895609e-01  3.341088e-01  3.786566e-01 #>  [45,]  1.710101e-01  2.090123e-01  2.470145e-01  2.850168e-01  3.230190e-01 #>  [46,]  1.408663e-01  1.721699e-01  2.034735e-01  2.347771e-01  2.660807e-01 #>  [47,]  1.101553e-01  1.346342e-01  1.591132e-01  1.835921e-01  2.080711e-01 #>  [48,]  7.900070e-02  9.655641e-02  1.141121e-01  1.316678e-01  1.492235e-01 #>  [49,]  4.752802e-02  5.808980e-02  6.865159e-02  7.921337e-02  8.977515e-02 #>  [50,]  1.586397e-02  1.938929e-02  2.291462e-02  2.643994e-02  2.996527e-02 #>  [51,] -1.586397e-02 -1.938929e-02 -2.291462e-02 -2.643994e-02 -2.996527e-02 #>  [52,] -4.752802e-02 -5.808980e-02 -6.865159e-02 -7.921337e-02 -8.977515e-02 #>  [53,] -7.900070e-02 -9.655641e-02 -1.141121e-01 -1.316678e-01 -1.492235e-01 #>  [54,] -1.101553e-01 -1.346342e-01 -1.591132e-01 -1.835921e-01 -2.080711e-01 #>  [55,] -1.408663e-01 -1.721699e-01 -2.034735e-01 -2.347771e-01 -2.660807e-01 #>  [56,] -1.710101e-01 -2.090123e-01 -2.470145e-01 -2.850168e-01 -3.230190e-01 #>  [57,] -2.004653e-01 -2.450131e-01 -2.895609e-01 -3.341088e-01 -3.786566e-01 #>  [58,] -2.291133e-01 -2.800273e-01 -3.309414e-01 -3.818554e-01 -4.327695e-01 #>  [59,] -2.568387e-01 -3.139140e-01 -3.709892e-01 -4.280645e-01 -4.851398e-01 #>  [60,] -2.835299e-01 -3.465366e-01 -4.095432e-01 -4.725499e-01 -5.355565e-01 #>  [61,] -3.090795e-01 -3.777638e-01 -4.464482e-01 -5.151325e-01 -5.838168e-01 #>  [62,] -3.333845e-01 -4.074699e-01 -4.815554e-01 -5.556408e-01 -6.297263e-01 #>  [63,] -3.563471e-01 -4.355353e-01 -5.147236e-01 -5.939118e-01 -6.731001e-01 #>  [64,] -3.778748e-01 -4.618470e-01 -5.458191e-01 -6.297913e-01 -7.137635e-01 #>  [65,] -3.978809e-01 -4.862989e-01 -5.747169e-01 -6.631349e-01 -7.515528e-01 #>  [66,] -4.162849e-01 -5.087927e-01 -6.013005e-01 -6.938082e-01 -7.863160e-01 #>  [67,] -4.330127e-01 -5.292377e-01 -6.254628e-01 -7.216878e-01 -8.179129e-01 #>  [68,] -4.479969e-01 -5.475518e-01 -6.471066e-01 -7.466615e-01 -8.462163e-01 #>  [69,] -4.611771e-01 -5.636610e-01 -6.661448e-01 -7.686286e-01 -8.711124e-01 #>  [70,] -4.725004e-01 -5.775005e-01 -6.825006e-01 -7.875007e-01 -8.925008e-01 #>  [71,] -4.819211e-01 -5.890147e-01 -6.961082e-01 -8.032018e-01 -9.102954e-01 #>  [72,] -4.894012e-01 -5.981571e-01 -7.069129e-01 -8.156687e-01 -9.244245e-01 #>  [73,] -4.949107e-01 -6.048909e-01 -7.148710e-01 -8.248512e-01 -9.348314e-01 #>  [74,] -4.984274e-01 -6.091890e-01 -7.199507e-01 -8.307123e-01 -9.414740e-01 #>  [75,] -4.999371e-01 -6.110342e-01 -7.221313e-01 -8.332284e-01 -9.443256e-01 #>  [76,] -4.994337e-01 -6.104189e-01 -7.214042e-01 -8.323894e-01 -9.433747e-01 #>  [77,] -4.969192e-01 -6.073457e-01 -7.177722e-01 -8.281987e-01 -9.386252e-01 #>  [78,] -4.924039e-01 -6.018270e-01 -7.112500e-01 -8.206731e-01 -9.300962e-01 #>  [79,] -4.859058e-01 -5.938848e-01 -7.018639e-01 -8.098430e-01 -9.178220e-01 #>  [80,] -4.774511e-01 -5.835514e-01 -6.896516e-01 -7.957519e-01 -9.018521e-01 #>  [81,] -4.670739e-01 -5.708681e-01 -6.746623e-01 -7.784566e-01 -8.822508e-01 #>  [82,] -4.548160e-01 -5.558862e-01 -6.569564e-01 -7.580267e-01 -8.590969e-01 #>  [83,] -4.407267e-01 -5.386659e-01 -6.366052e-01 -7.345445e-01 -8.324837e-01 #>  [84,] -4.248627e-01 -5.192767e-01 -6.136906e-01 -7.081045e-01 -8.025185e-01 #>  [85,] -4.072880e-01 -4.977964e-01 -5.883049e-01 -6.788133e-01 -7.693217e-01 #>  [86,] -3.880732e-01 -4.743117e-01 -5.605502e-01 -6.467887e-01 -7.330272e-01 #>  [87,] -3.672959e-01 -4.489172e-01 -5.305385e-01 -6.121598e-01 -6.937811e-01 #>  [88,] -3.450395e-01 -4.217150e-01 -4.983904e-01 -5.750658e-01 -6.517413e-01 #>  [89,] -3.213938e-01 -3.928147e-01 -4.642355e-01 -5.356563e-01 -6.070772e-01 #>  [90,] -2.964540e-01 -3.623326e-01 -4.282113e-01 -4.940899e-01 -5.599686e-01 #>  [91,] -2.703204e-01 -3.303916e-01 -3.904628e-01 -4.505340e-01 -5.106052e-01 #>  [92,] -2.430984e-01 -2.971202e-01 -3.511421e-01 -4.051639e-01 -4.591858e-01 #>  [93,] -2.148975e-01 -2.626524e-01 -3.104074e-01 -3.581624e-01 -4.059174e-01 #>  [94,] -1.858312e-01 -2.271271e-01 -2.684229e-01 -3.097187e-01 -3.510145e-01 #>  [95,] -1.560167e-01 -1.906871e-01 -2.253575e-01 -2.600279e-01 -2.946983e-01 #>  [96,] -1.255740e-01 -1.534793e-01 -1.813847e-01 -2.092900e-01 -2.371953e-01 #>  [97,] -9.462562e-02 -1.156535e-01 -1.366815e-01 -1.577094e-01 -1.787373e-01 #>  [98,] -6.329623e-02 -7.736205e-02 -9.142788e-02 -1.054937e-01 -1.195595e-01 #>  [99,] -3.171196e-02 -3.875906e-02 -4.580616e-02 -5.285327e-02 -5.990037e-02 #> [100,] -1.127154e-16 -8.270575e-17 -3.016287e-16 -1.701814e-16 -3.778657e-16 #>                 [,6]          [,7]          [,8]          [,9]         [,10] #>   [1,] -2.818609e-17  4.072306e-17  7.461948e-18 -7.489899e-17  1.776679e-18 #>   [2,]  6.694747e-02  7.399457e-02  8.104168e-02  8.808878e-02  9.513588e-02 #>   [3,]  1.336254e-01  1.476912e-01  1.617570e-01  1.758229e-01  1.898887e-01 #>   [4,]  1.997652e-01  2.207931e-01  2.418210e-01  2.628490e-01  2.838769e-01 #>   [5,]  2.651007e-01  2.930060e-01  3.209113e-01  3.488166e-01  3.767220e-01 #>   [6,]  3.293686e-01  3.640390e-01  3.987094e-01  4.333798e-01  4.680502e-01 #>   [7,]  3.923104e-01  4.336062e-01  4.749020e-01  5.161979e-01  5.574937e-01 #>   [8,]  4.536724e-01  5.014274e-01  5.491824e-01  5.969374e-01  6.446924e-01 #>   [9,]  5.132077e-01  5.672295e-01  6.212514e-01  6.752732e-01  7.292951e-01 #>  [10,]  5.706764e-01  6.307476e-01  6.908188e-01  7.508900e-01  8.109612e-01 #>  [11,]  6.258473e-01  6.917259e-01  7.576046e-01  8.234832e-01  8.893619e-01 #>  [12,]  6.784980e-01  7.499189e-01  8.213397e-01  8.927606e-01  9.641814e-01 #>  [13,]  7.284167e-01  8.050922e-01  8.817676e-01  9.584431e-01  1.035119e+00 #>  [14,]  7.754024e-01  8.570237e-01  9.386450e-01  1.020266e+00  1.101888e+00 #>  [15,]  8.192657e-01  9.055042e-01  9.917427e-01  1.077981e+00  1.164220e+00 #>  [16,]  8.598302e-01  9.503386e-01  1.040847e+00  1.131355e+00  1.221864e+00 #>  [17,]  8.969324e-01  9.913463e-01  1.085760e+00  1.180174e+00  1.274588e+00 #>  [18,]  9.304230e-01  1.028362e+00  1.126302e+00  1.224241e+00  1.322180e+00 #>  [19,]  9.601671e-01  1.061237e+00  1.162308e+00  1.263378e+00  1.364448e+00 #>  [20,]  9.860450e-01  1.089839e+00  1.193633e+00  1.297428e+00  1.401222e+00 #>  [21,]  1.007952e+00  1.114053e+00  1.220153e+00  1.326253e+00  1.432353e+00 #>  [22,]  1.025801e+00  1.133780e+00  1.241759e+00  1.349738e+00  1.457717e+00 #>  [23,]  1.039519e+00  1.148942e+00  1.258365e+00  1.367789e+00  1.477212e+00 #>  [24,]  1.049052e+00  1.159478e+00  1.269905e+00  1.380331e+00  1.490758e+00 #>  [25,]  1.054360e+00  1.165345e+00  1.276330e+00  1.387316e+00  1.498301e+00 #>  [26,]  1.055423e+00  1.166520e+00  1.277617e+00  1.388714e+00  1.499811e+00 #>  [27,]  1.052236e+00  1.162997e+00  1.273759e+00  1.384521e+00  1.495282e+00 #>  [28,]  1.044812e+00  1.154792e+00  1.264772e+00  1.374752e+00  1.484732e+00 #>  [29,]  1.033180e+00  1.141936e+00  1.250692e+00  1.359448e+00  1.468204e+00 #>  [30,]  1.017389e+00  1.124483e+00  1.231576e+00  1.338670e+00  1.445763e+00 #>  [31,]  9.975009e-01  1.102501e+00  1.207501e+00  1.312501e+00  1.417501e+00 #>  [32,]  9.735962e-01  1.076080e+00  1.178564e+00  1.281048e+00  1.383531e+00 #>  [33,]  9.457712e-01  1.045326e+00  1.144881e+00  1.244436e+00  1.343991e+00 #>  [34,]  9.141379e-01  1.010363e+00  1.106588e+00  1.202813e+00  1.299038e+00 #>  [35,]  8.788237e-01  9.713315e-01  1.063839e+00  1.156347e+00  1.248855e+00 #>  [36,]  8.399708e-01  9.283888e-01  1.016807e+00  1.105225e+00  1.193643e+00 #>  [37,]  7.977357e-01  8.817078e-01  9.656800e-01  1.049652e+00  1.133624e+00 #>  [38,]  7.522883e-01  8.314765e-01  9.106648e-01  9.898530e-01  1.069041e+00 #>  [39,]  7.038117e-01  7.778972e-01  8.519826e-01  9.260681e-01  1.000154e+00 #>  [40,]  6.525012e-01  7.211855e-01  7.898698e-01  8.585541e-01  9.272385e-01 #>  [41,]  5.985632e-01  6.615698e-01  7.245765e-01  7.875831e-01  8.505898e-01 #>  [42,]  5.422150e-01  5.992903e-01  6.563656e-01  7.134408e-01  7.705161e-01 #>  [43,]  4.836836e-01  5.345976e-01  5.855117e-01  6.364257e-01  6.873398e-01 #>  [44,]  4.232045e-01  4.677523e-01  5.123001e-01  5.568480e-01  6.013958e-01 #>  [45,]  3.610213e-01  3.990235e-01  4.370257e-01  4.750280e-01  5.130302e-01 #>  [46,]  2.973844e-01  3.286880e-01  3.599916e-01  3.912952e-01  4.225988e-01 #>  [47,]  2.325500e-01  2.570290e-01  2.815079e-01  3.059869e-01  3.304658e-01 #>  [48,]  1.667793e-01  1.843350e-01  2.018907e-01  2.194464e-01  2.370021e-01 #>  [49,]  1.003369e-01  1.108987e-01  1.214605e-01  1.320223e-01  1.425841e-01 #>  [50,]  3.349060e-02  3.701592e-02  4.054125e-02  4.406657e-02  4.759190e-02 #>  [51,] -3.349060e-02 -3.701592e-02 -4.054125e-02 -4.406657e-02 -4.759190e-02 #>  [52,] -1.003369e-01 -1.108987e-01 -1.214605e-01 -1.320223e-01 -1.425841e-01 #>  [53,] -1.667793e-01 -1.843350e-01 -2.018907e-01 -2.194464e-01 -2.370021e-01 #>  [54,] -2.325500e-01 -2.570290e-01 -2.815079e-01 -3.059869e-01 -3.304658e-01 #>  [55,] -2.973844e-01 -3.286880e-01 -3.599916e-01 -3.912952e-01 -4.225988e-01 #>  [56,] -3.610213e-01 -3.990235e-01 -4.370257e-01 -4.750280e-01 -5.130302e-01 #>  [57,] -4.232045e-01 -4.677523e-01 -5.123001e-01 -5.568480e-01 -6.013958e-01 #>  [58,] -4.836836e-01 -5.345976e-01 -5.855117e-01 -6.364257e-01 -6.873398e-01 #>  [59,] -5.422150e-01 -5.992903e-01 -6.563656e-01 -7.134408e-01 -7.705161e-01 #>  [60,] -5.985632e-01 -6.615698e-01 -7.245765e-01 -7.875831e-01 -8.505898e-01 #>  [61,] -6.525012e-01 -7.211855e-01 -7.898698e-01 -8.585541e-01 -9.272385e-01 #>  [62,] -7.038117e-01 -7.778972e-01 -8.519826e-01 -9.260681e-01 -1.000154e+00 #>  [63,] -7.522883e-01 -8.314765e-01 -9.106648e-01 -9.898530e-01 -1.069041e+00 #>  [64,] -7.977357e-01 -8.817078e-01 -9.656800e-01 -1.049652e+00 -1.133624e+00 #>  [65,] -8.399708e-01 -9.283888e-01 -1.016807e+00 -1.105225e+00 -1.193643e+00 #>  [66,] -8.788237e-01 -9.713315e-01 -1.063839e+00 -1.156347e+00 -1.248855e+00 #>  [67,] -9.141379e-01 -1.010363e+00 -1.106588e+00 -1.202813e+00 -1.299038e+00 #>  [68,] -9.457712e-01 -1.045326e+00 -1.144881e+00 -1.244436e+00 -1.343991e+00 #>  [69,] -9.735962e-01 -1.076080e+00 -1.178564e+00 -1.281048e+00 -1.383531e+00 #>  [70,] -9.975009e-01 -1.102501e+00 -1.207501e+00 -1.312501e+00 -1.417501e+00 #>  [71,] -1.017389e+00 -1.124483e+00 -1.231576e+00 -1.338670e+00 -1.445763e+00 #>  [72,] -1.033180e+00 -1.141936e+00 -1.250692e+00 -1.359448e+00 -1.468204e+00 #>  [73,] -1.044812e+00 -1.154792e+00 -1.264772e+00 -1.374752e+00 -1.484732e+00 #>  [74,] -1.052236e+00 -1.162997e+00 -1.273759e+00 -1.384521e+00 -1.495282e+00 #>  [75,] -1.055423e+00 -1.166520e+00 -1.277617e+00 -1.388714e+00 -1.499811e+00 #>  [76,] -1.054360e+00 -1.165345e+00 -1.276330e+00 -1.387316e+00 -1.498301e+00 #>  [77,] -1.049052e+00 -1.159478e+00 -1.269905e+00 -1.380331e+00 -1.490758e+00 #>  [78,] -1.039519e+00 -1.148942e+00 -1.258365e+00 -1.367789e+00 -1.477212e+00 #>  [79,] -1.025801e+00 -1.133780e+00 -1.241759e+00 -1.349738e+00 -1.457717e+00 #>  [80,] -1.007952e+00 -1.114053e+00 -1.220153e+00 -1.326253e+00 -1.432353e+00 #>  [81,] -9.860450e-01 -1.089839e+00 -1.193633e+00 -1.297428e+00 -1.401222e+00 #>  [82,] -9.601671e-01 -1.061237e+00 -1.162308e+00 -1.263378e+00 -1.364448e+00 #>  [83,] -9.304230e-01 -1.028362e+00 -1.126302e+00 -1.224241e+00 -1.322180e+00 #>  [84,] -8.969324e-01 -9.913463e-01 -1.085760e+00 -1.180174e+00 -1.274588e+00 #>  [85,] -8.598302e-01 -9.503386e-01 -1.040847e+00 -1.131355e+00 -1.221864e+00 #>  [86,] -8.192657e-01 -9.055042e-01 -9.917427e-01 -1.077981e+00 -1.164220e+00 #>  [87,] -7.754024e-01 -8.570237e-01 -9.386450e-01 -1.020266e+00 -1.101888e+00 #>  [88,] -7.284167e-01 -8.050922e-01 -8.817676e-01 -9.584431e-01 -1.035119e+00 #>  [89,] -6.784980e-01 -7.499189e-01 -8.213397e-01 -8.927606e-01 -9.641814e-01 #>  [90,] -6.258473e-01 -6.917259e-01 -7.576046e-01 -8.234832e-01 -8.893619e-01 #>  [91,] -5.706764e-01 -6.307476e-01 -6.908188e-01 -7.508900e-01 -8.109612e-01 #>  [92,] -5.132077e-01 -5.672295e-01 -6.212514e-01 -6.752732e-01 -7.292951e-01 #>  [93,] -4.536724e-01 -5.014274e-01 -5.491824e-01 -5.969374e-01 -6.446924e-01 #>  [94,] -3.923104e-01 -4.336062e-01 -4.749020e-01 -5.161979e-01 -5.574937e-01 #>  [95,] -3.293686e-01 -3.640390e-01 -3.987094e-01 -4.333798e-01 -4.680502e-01 #>  [96,] -2.651007e-01 -2.930060e-01 -3.209113e-01 -3.488166e-01 -3.767220e-01 #>  [97,] -1.997652e-01 -2.207931e-01 -2.418210e-01 -2.628490e-01 -2.838769e-01 #>  [98,] -1.336254e-01 -1.476912e-01 -1.617570e-01 -1.758229e-01 -1.898887e-01 #>  [99,] -6.694747e-02 -7.399457e-02 -8.104168e-02 -8.808878e-02 -9.513588e-02 #> [100,] -2.867226e-16 -2.450279e-16 -3.055033e-16 -4.150787e-16 -3.656174e-16 mfd1c <- Mfd(X=mfd1$coefs, mdbs = mdbs1, method = \"coefs\") all.equal(c(mfd1$basis,mfd1$coefs,mfd1$nobs),c(mfd1c$basis,mfd1c$coefs,mfd1c$nobs)) #> [1] TRUE length(mfd1) #> [1] 10 mean(mfd1) #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  plot(mfd1)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":null,"dir":"Reference","previous_headings":"","what":"A Class for `MHPCA` objects — mhpca","title":"A Class for `MHPCA` objects — mhpca","text":"`mhpca` class represents hybrid principal components components. `mhpca` class represents regularized functional principal components ('MHFPCs') components.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Class for `MHPCA` objects — mhpca","text":"","code":"Mhpca(   hd_obj,   method = \"power\",   ncomp = 3,   smooth_tuning = NULL,   sparse_tuning_u = NULL,   sparse_tuning_nfd = NULL,   sparse_tuning_fd = NULL,   centerfns = TRUE,   alpha_orth = FALSE,   smoothing_type = \"basispen\",   sparse_type_u = \"soft\",   sparse_type_nfd = \"soft\",   sparse_type_fd = \"soft\",   K_fold_u = 30,   K_fold_nfd = 30,   K_fold_fd = 30,   n_cores = 1,   sparse_CV = TRUE,   smooth_GCV = TRUE,   penalize_nfd = FALSE,   penalize_fd = FALSE,   penalize_u = FALSE )"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Class for `MHPCA` objects — mhpca","text":"hd_obj `hd` object representing multivariate functional data. method character string specifying approach used MFPCA computation. Options \"power\" (default), uses power algorithm, \"eigen\", uses eigen decomposition approach. ncomp number functional principal components retain. smooth_tuning list vector specifying smoothing regularization parameter(s) variable. NULL, non-smoothing MFPCA estimated. sparse_tuning_u list vector specifying sparsity regularization parameter(s) variable. NULL, non-sparse MHPCA estimated. sparse_tuning_nfd list vector specifying sparsity regularization parameter(s) non functional variable. NULL, non-sparse MHPCA estimated. sparse_tuning_fd list vector specifying sparsity regularization parameter(s) functional variable. NULL, non-sparse MHPCA estimated. centerfns Logical indicating whether center functional data analysis. Default TRUE. alpha_orth Logical indicating whether perform orthogonalization regularization parameters. `method` \"power\", setting `alpha_orth = FALSE` (default) uses sequential power approach, setting `alpha_orth = TRUE` uses joint power approach. smoothing_type type smoothing penalty applied coefficients. types \"coefpen\" \"basispen\" supported. Default \"coefpen\". sparse_type_u type sparse penalty applied coefficients. types \"soft\", \"hard\" \"SCAD\" supported. Default \"soft\". sparse_type_nfd type sparse penalty applied nfd right singular vectors. types \"soft\", \"hard\" \"SCAD\" supported. Default \"soft\". sparse_type_fd type sparse penalty applied fd right singular vectors. types \"soft\", \"hard\" \"SCAD\" supported. Default \"soft\". K_fold_u integer specifying number folds sparse cross-validation process u. Default 30. K_fold_nfd integer specifying number folds sparse cross-validation process nfd. Default 30. K_fold_fd integer specifying number folds sparse cross-validation process fd. Default 30. n_cores parallel computing Cross Validation. sparse_CV Logical indicating whether cross-validation applied select optimal sparse tuning parameter sequential power approach. `sparse_CV = TRUE`, series tuning parameters provided vector positive number max equals number subjects. `sparse_CV = FALSE`, specific tuning parameters given directly principal components. Tuning parameters provided vector length equal `ncomp`. dimensions input tuning parameters incorrect, converted list internally, warning issued. smooth_GCV Logical indicating whether generalized cross-validation applied select optimal smooth tuning parameter. `smooth_GCV = TRUE`, series tuning parameters provided list length equal number variables. list incorrect dimensions provided, converted correct list internally, warning issued. `smooth_GCV = FALSE`, specific tuning parameters given directly. `method` \"power\" `alpha_orth = FALSE` (sequential power), tuning parameters provided list length equal number variables, element vector length `ncomp`. `method` \"power\" `alpha_orth = TRUE` (joint power), tuning parameters provided vector length equal number variables. dimensions input tuning parameters incorrect, converted list internally, warning issued. penalize_nfd Logical indicating whether sparsity penalty sequential power approach applied nfd right singular vector. penalize_fd Logical indicating whether sparsity penalty sequential power approach applied fd right singular vector. penalize_u Logical indicating whether penalize non functional object left singular vector .","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"A Class for `MHPCA` objects — mhpca","text":"pc_mfd object class `mvmfd` first indices (fields) represents harmonics  second indices represents variables pc_nfd object class `mvnfd` first indices (fields) represents harmonics  second indices represents variables mean_mfd multivariate functional data object giving mean function mean_nfd data object giving mean non functional objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"A Class for `MHPCA` objects — mhpca","text":"pc_mfd object class `mvmfd` first indices (fields) represents harmonics  second indices represents variables pc_nfd object class `mvnfd` first indices (fields) represents harmonics  second indices represents variables lsv = Left singular values vectors values = set eigenvalues smooth_tuning = list smoothing penalties parameters sparse_tuning_u = list sparse penalties parameters GCVs = Generalized cross validations scores smoothing penalties parameters. smoothing sparse tuning penalties used MHPCA method, represents conditional generalized cross-validation scores, means computed based optimal sparse tuning parameter selected via cross validation. CVs_u = Cross validations scores sparse penalties u parameters CVs_nfd = Cross validations scores sparse penalties nfd parameters mean_mfd multivariate functional data object giving mean function mean_nfd data object giving mean non functional objects","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"A Class for `MHPCA` objects — mhpca","text":"mhpca$new() mhpca$clone()","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Class for `MHPCA` objects — mhpca","text":"","code":"mhpca$new(   hd_obj,   method = \"power\",   ncomp = 3,   smooth_tuning = NULL,   sparse_tuning_u = NULL,   sparse_tuning_nfd = NULL,   sparse_tuning_fd = NULL,   centerfns = TRUE,   alpha_orth = FALSE,   smoothing_type = \"coefpen\",   sparse_type_u = \"soft\",   sparse_type_nfd = \"soft\",   sparse_type_fd = \"soft\",   K_fold_u = 30,   K_fold_nfd = 30,   K_fold_fd = 30,   n_cores = 1,   sparse_CV,   smooth_GCV,   penalize_nfd = FALSE,   penalize_fd = FALSE,   penalize_u = FALSE )"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"A Class for `MHPCA` objects — mhpca","text":"objects class cloneable method.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"A Class for `MHPCA` objects — mhpca","text":"","code":"mhpca$clone(deep = FALSE)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Class for `MHPCA` objects — mhpca","text":"deep Whether make deep clone.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mhpca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Class for `MHPCA` objects — mhpca","text":"","code":"require(fda) # Brownian Bridge simulation on [0,1] M <- 110 # number of components N <- 20 # number of instances n <- 100 # number of grides t0 <- seq(0, 1, len = n) j <- 1:M alpha1 <- list(a1 = 2^seq(0, 1, length.out = 3), a2 = 2^seq(0, 1, length.out = 3)) psi_1 <- function(t, m) sin(m * pi * t) # eigenfunction of BB psi_2 <- function(t, m) sin((2 * m - 1) * pi / 2 * t) # eigenfunction of BM PC_1 <- outer(t0, j, FUN = psi_1) # n by M matrix PC_2 <- outer(t0, j, FUN = psi_2) # n by M matrix Z <- matrix(rnorm(N * M), nr = M) lambda <- matrix(2 / (pi * (2 * j - 1)), nr = M, nc = N) X_1t <- PC_1 %*% (lambda * Z) X_2t <- PC_2 %*% (lambda * Z) noise <- rnorm(n * N, 0, 0.1) X_1 <- X_1t + noise X_2 <- X_2t + noise bs <- create.bspline.basis(c(0, 1), 51) mdbs <- Basismfd(bs) mfd1 <- Mfd(X = X_1, mdbs = mdbs) mfd2 <- Mfd(X = X_2, mdbs = mdbs) hd_obj <- hd(mfd1, mfd2) #> Error in hd(mfd1, mfd2): could not find function \"hd\" k <- 2 Re0 <- Mhpca(hd_obj, ncomp = k, alpha = c(0, 0)) #> Error: object 'hd_obj' not found fpc0 <- Re0$pc_mfd #> Error: object 'Re0' not found scores0 <- inprod_hd(hd_obj, fpc0) #> Error: object 'hd_obj' not found dim(scores0) #> Error: object 'scores0' not found Re0$alpha #> Error: object 'Re0' not found Re1 <- Mhpca(hd_obj, ncomp = k, alpha = alpha1) #> Error: object 'hd_obj' not found Re1$alpha #> Error: object 'Re1' not found Re3 <- Mhpca(mfd1, ncomp = k, alpha = alpha1$a1) #> Error in if (method == \"power\" & alpha_orth == \"FALSE\") {    if (!is.null(hd_obj$mf)) {        if (is.vector(smooth_tuning) & !is.list(smooth_tuning)) {            if (smooth_GCV == FALSE) {                if (length(smooth_tuning) != ncomp) {                  warning(\"The length of 'smooth_tuning' did not match 'ncomp' and has been adjusted accordingly.\",                     call. = FALSE)                  smooth_tuning <- rep(smooth_tuning, length.out = ncomp)                }                smooth_tuning <- replicate(hd_obj$mf$nvar, smooth_tuning,                   simplify = FALSE)            }            else {                warning(\"The length of 'smooth_tuning' did not match 'hd_obj$mf$nvar' and has been adjusted accordingly.\",                   call. = FALSE)                smooth_tuning <- replicate(hd_obj$mf$nvar, smooth_tuning,                   simplify = FALSE)            }        }        else if (is.matrix(smooth_tuning)) {            if (smooth_GCV == FALSE) {                if (!all(dim(smooth_tuning) == c(hd_obj$mf$nvar,                   ncomp))) {                  smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                     length.out = hd_obj$mf$nvar), rep(1:ncol(smooth_tuning),                     length.out = ncomp)]                  smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                  warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                     call. = FALSE)                }                else {                  smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                }            }            else {                if (dim(smooth_tuning)[1] != hd_obj$mf$nvar) {                  smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                     length.out = hd_obj$mf$nvar), , drop = FALSE][1:hd_obj$mf$nvar,                     , drop = FALSE]                  smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                  warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                     call. = FALSE)                }                else {                  smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                }            }        }        else if (is.list(smooth_tuning)) {            if (smooth_GCV == FALSE) {                if (length(smooth_tuning) != hd_obj$mf$nvar) {                  warning(\"Adjusting 'smooth_tuning' to match 'hd_obj$mf$nvar'.\",                     call. = FALSE)                  smooth_tuning <- rep(smooth_tuning, length.out = hd_obj$mf$nvar)                }                smooth_tuning <- lapply(smooth_tuning, function(vec) {                  if (length(vec) != ncomp) {                    warning(\"Adjusting vector length in 'smooth_tuning' to match 'ncomp'.\",                       call. = FALSE)                    vec <- rep(vec, length.out = ncomp)                  }                  vec                })            }            else {                if (length(smooth_tuning) != hd_obj$mf$nvar) {                  warning(\"Adjusting 'smooth_tuning' to match 'hd_obj$mf$nvar'.\",                     call. = FALSE)                  smooth_tuning <- rep(smooth_tuning, length.out = hd_obj$mf$nvar)                }            }        }        if (!is.null(smooth_tuning)) {            names(smooth_tuning) <- paste0(\"var\", 1:hd_obj$mf$nvar)        }        if (is.vector(sparse_tuning_fd) & !is.list(sparse_tuning_fd)) {            if (sparse_CV == FALSE) {                if (length(sparse_tuning_fd) != ncomp) {                  warning(\"The length of 'sparse_tuning_fd' did not match 'ncomp' and has been adjusted accordingly.\",                     call. = FALSE)                  sparse_tuning_fd <- rep(sparse_tuning_fd, length.out = ncomp)                }                sparse_tuning_fd <- replicate(hd_obj$mf$nvar,                   sparse_tuning_fd, simplify = FALSE)            }            else {                warning(\"The length of 'sparse_tuning_fd' did not match 'hd_obj$mf$nvar' and has been adjusted accordingly.\",                   call. = FALSE)                sparse_tuning_fd <- replicate(hd_obj$mf$nvar,                   sparse_tuning_fd, simplify = FALSE)            }        }        else if (is.list(sparse_tuning_fd)) {            if (sparse_CV == FALSE) {                if (length(sparse_tuning_fd) != hd_obj$mf$nvar) {                  warning(\"Adjusting 'sparse_tuning_fd' to match 'hd_obj$mf$nvar'.\",                     call. = FALSE)                  sparse_tuning_fd <- rep(sparse_tuning_fd, length.out = hd_obj$mf$nvar)                }                sparse_tuning_fd <- lapply(sparse_tuning_fd,                   function(vec) {                    if (length(vec) != ncomp) {                      warning(\"Adjusting vector length in 'sparse_tuning_fd' to match 'ncomp'.\",                         call. = FALSE)                      vec <- rep(vec, length.out = ncomp)                    }                    vec                  })            }            else {                if (length(sparse_tuning_fd) != hd_obj$mf$nvar) {                  warning(\"Adjusting 'sparse_tuning_fd' to match 'hd_obj$mf$nvar'.\",                     call. = FALSE)                  sparse_tuning_fd <- rep(sparse_tuning_fd, length.out = hd_obj$mf$nvar)                }            }        }        if (!is.null(sparse_tuning_fd)) {            names(sparse_tuning_fd) <- paste0(\"var\", 1:hd_obj$mf$nvar)        }    }    if (!is.null(hd_obj$nf)) {        if (is.vector(sparse_tuning_nfd) & !is.list(sparse_tuning_nfd)) {            if (sparse_CV == FALSE) {                if (length(sparse_tuning_nfd) != ncomp) {                  warning(\"The length of 'sparse_tuning_nfd' did not match 'ncomp' and has been adjusted accordingly.\",                     call. = FALSE)                  sparse_tuning_nfd <- rep(sparse_tuning_nfd,                     length.out = ncomp)                }                sparse_tuning_nfd <- replicate(hd_obj$nf$nvar,                   sparse_tuning_nfd, simplify = FALSE)            }            else {                warning(\"The length of 'sparse_tuning_nfd' did not match 'hd_obj$mf$nvar' and has been adjusted accordingly.\",                   call. = FALSE)                sparse_tuning_nfd <- replicate(hd_obj$nf$nvar,                   sparse_tuning_nfd, simplify = FALSE)            }        }        else if (is.list(sparse_tuning_nfd)) {            if (sparse_CV == FALSE) {                if (length(sparse_tuning_nfd) != hd_obj$nf$nvar) {                  warning(\"Adjusting 'sparse_tuning_nfd' to match 'hd_obj$nf$nvar'.\",                     call. = FALSE)                  sparse_tuning_nfd <- rep(sparse_tuning_nfd,                     length.out = hd_obj$nf$nvar)                }                sparse_tuning_nfd <- lapply(sparse_tuning_nfd,                   function(vec) {                    if (length(vec) != ncomp) {                      warning(\"Adjusting vector length in 'sparse_tuning_nfd' to match 'ncomp'.\",                         call. = FALSE)                      vec <- rep(vec, length.out = ncomp)                    }                    vec                  })            }            else {                if (length(sparse_tuning_nfd) != hd_obj$nf$nvar) {                  warning(\"Adjusting 'sparse_tuning_nfd' to match 'hd_obj$nf$nvar'.\",                     call. = FALSE)                  sparse_tuning_nfd <- rep(sparse_tuning_nfd,                     length.out = hd_obj$mf$nvar)                }            }        }        if (!is.null(sparse_tuning_nfd)) {            names(sparse_tuning_nfd) <- paste0(\"var\", 1:hd_obj$nf$nvar)        }    }    if (sparse_CV == FALSE & length(sparse_tuning_u) != ncomp &         !is.null(sparse_tuning_u)) {        warning(\"The length of 'sparse_tuning_u' did not match 'ncomp' and has been adjusted accordingly.\",             call. = FALSE)        sparse_tuning_u <- rep(sparse_tuning_u, length.out = ncomp)    }    result <- sequential_power_hybrid(hd_obj = hd_obj, n = ncomp,         smooth_tuning = smooth_tuning, sparse_tuning_u = sparse_tuning_u,         sparse_tuning_nfd = sparse_tuning_nfd, sparse_tuning_fd = sparse_tuning_fd,         centerfns = centerfns, alpha_orth = alpha_orth, smooth_tuning_type = smoothing_type,         sparse_tuning_type_u = sparse_type_u, sparse_tuning_type_nfd = sparse_type_nfd,         sparse_tuning_type_fd = sparse_type_fd, K_fold_u = K_fold_u,         K_fold_nfd = K_fold_nfd, K_fold_fd = K_fold_fd, sparse_CV = sparse_CV,         smooth_GCV = smooth_GCV, penalize_nfd = penalize_nfd,         penalize_fd = penalize_fd, penalize_u = penalize_u, n_cores = n_cores,         sparse_iter = sparse_iter, tol = tol, max_iter = max_iter)} else if (method == \"eigen\" || alpha_orth == \"TRUE\") {    if (!is.null(hd_obj$mf)) {        if (is.vector(smooth_tuning) & !is.list(smooth_tuning)) {            if (smooth_GCV == FALSE) {                if (length(smooth_tuning) != hd_obj$mf$nvar) {                  warning(\"The length of 'smooth_tuning' did not match number of variables and has been adjusted accordingly.\",                     call. = FALSE)                  smooth_tuning <- rep(smooth_tuning, length.out = hd_obj$mf$nvar)                }                smooth_tuning <- lapply(1:hd_obj$mf$nvar, function(i) smooth_tuning[i])            }            else {                warning(\"The length of 'smooth_tuning' did not match number of variables and has been adjusted accordingly.\",                   call. = FALSE)                smooth_tuning <- replicate(hd_obj$mf$nvar, smooth_tuning,                   simplify = FALSE)            }        }        else if (is.matrix(smooth_tuning)) {            if (smooth_GCV == FALSE) {                if (!all(dim(smooth_tuning) == c(hd_obj$mf$nvar,                   1))) {                  smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                     length.out = hd_obj$mf$nvar), rep(1:ncol(smooth_tuning),                     length.out = 1)]                  smooth_tuning <- as.list(smooth_tuning)                  warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                     call. = FALSE)                }                else {                  smooth_tuning <- as.list(smooth_tuning)                }            }            else {                if (dim(smooth_tuning)[1] != hd_obj$mf$nvar) {                  smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                     length.out = hd_obj$mf$nvar), , drop = FALSE][1:hd_obj$mf$nvar,                     , drop = FALSE]                  smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                  warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                     call. = FALSE)                }                else {                  smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                }            }        }        else if (is.list(smooth_tuning)) {            if (smooth_GCV == FALSE) {                if (length(smooth_tuning) != hd_obj$mf$nvar) {                  warning(\"Adjusting 'smooth_tuning' to match 'hd_obj$mf$nvar'.\",                     call. = FALSE)                  smooth_tuning <- rep(smooth_tuning, length.out = hd_obj$mf$nvar)                }                smooth_tuning <- lapply(smooth_tuning, function(vec) {                  if (length(vec) != 1) {                    warning(\"Adjusting vector length in 'smooth_tuning' to match 'ncomp'.\",                       call. = FALSE)                    vec <- rep(vec, length.out = 1)                  }                  vec                })            }            else {                if (length(smooth_tuning) != hd_obj$mf$nvar) {                  warning(\"Adjusting 'smooth_tuning' to match 'hd_obj$mf$nvar'.\",                     call. = FALSE)                  smooth_tuning <- rep(smooth_tuning, length.out = hd_obj$mf$nvar)[1:hd_obj$mf$nvar]                }            }        }        if (!is.null(smooth_tuning)) {            names(smooth_tuning) <- paste0(\"var\", 1:hd_obj$mf$nvar)        }    }    if (method == \"power\") {        result <- joint_power_hybrid(hd_obj = hd_obj, n = ncomp,             smooth_tuning = smooth_tuning, centerfns = centerfns,             alpha_orth = alpha_orth, smooth_tuning_type = smoothing_type,             tol = tol, max_iter = max_iter)    }    else {        result <- eigen_approach_hybrid(hd_obj = hd_obj, n = ncomp,             alpha = smooth_tuning, centerfns = centerfns, penalty_type = smoothing_type)    }}: the condition has length > 1 Re3$alpha #> Error: object 'Re3' not found"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"`mvbasismfd` set  multivariate multidimensional basis functions. class utilizes basis objects `basismfd`. Constructor `mvbasismfd` objects (`Mvbasismfd`)","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"","code":"Mvbasismfd(basis)  Mvbasismfd(basis)  # S3 method for class 'mvbasismfd' mvbasismfd_obj[i = \"index\"]"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"basis list basisfd objects mvbasismfd_obj 'mvmfd' object index indices specifying subsets extract first dimension","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"`mvbasismfd` object containing specified subsets","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"nvar number variables basis list `mvbasisfd` objects dimSupp sequence positive integers specifying support domain `mvbasismfd` object. nbasis list integers specifying number basis functions supp list matrices specifying support basis functions gram Gram matrix.","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"mvbasismfd$new() mvbasismfd$eval() mvbasismfd$clone()","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"Constructor `mvbasismfd` objects (Mvbasismfd(...) )","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"","code":"mvbasismfd$new(basis)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"basis list `basismfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"Evaluate `mvbasismfd` object given argument values","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"","code":"mvbasismfd$eval(evalarg)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"evalarg list numeric vectors argument values `mvbasismfd` evaluated","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"list evaluated values","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"objects class cloneable method.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"","code":"mvbasismfd$clone(deep = FALSE)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvbasismfd.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Functional Basis — mvbasismfd","text":"deep Whether make deep clone.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"`mvmfd` class represents functional data ... Constructor `mvmfd` objects (`Mvmfd`)","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"","code":"Mvmfd(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"... `mfd` objects separated comma","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"basis `mvbasismfd` object coefs matrix coefficients. nobs number observation nvar number variables","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"mvmfd$new() mvmfd$eval() mvmfd$print() mvmfd$clone()","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"Constructor `mvmfd` objects ('Mvmfd')","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"","code":"mvmfd$new(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"... `mfd` objects separated comma","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"Eval method `mvmfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"","code":"mvmfd$eval(evalarg)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"evalarg list numeric vectors argument values `mvmfd` evaluated.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"list evaluated values","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"Print method `mvmfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"","code":"mvmfd$print(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"... Additional arguments passed `print`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"objects class cloneable method.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"","code":"mvmfd$clone(deep = FALSE)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"deep Whether make deep clone.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvmfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Set of Multivariate Multidimensional Functional Data objects — mvmfd","text":"","code":"require(fda) bs1 <- create.fourier.basis(c(0, 2 * pi), 5) bs2 <- create.bspline.basis(c(0, 1), 7) bs3 <- create.exponential.basis(c(0, 2), 3) nobs <- 10 argval1 <- seq(0, 2 * pi, length.out = 12) X1 <- outer(sin(argval1), seq(0.5, 1.5, length.out = nobs)) mdbs1 <- Basismfd(bs1) mfd1 <- Mfd(argval1, X1, mdbs1) mdbs2 <- Basismfd(bs1) argval2 <- argval1 X2 <- outer(cos(argval2), seq(0.2, 1.5, length.out = nobs)) mfd2 <- Mfd(argval2, X2, mdbs1) mvmfd1 <- Mvmfd(mfd1, mfd2) mvmfd1[1] #> A 'mvmfd' object with 2 variable(s): #>  #> Variable 1: #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  #> Variable 2: #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  mvmfd1[1, 1] #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  mvmfd1[1:5, 2] #> A 1-Dimensional 'mfd' object: #> nobs: 5  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  mvmfd1[, 1] #> A 1-Dimensional 'mfd' object: #> nobs: 10  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  mvmfd1[1:5, ] #> A 'mvmfd' object with 2 variable(s): #>  #> Variable 1: #> A 1-Dimensional 'mfd' object: #> nobs: 5  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  #> Variable 2: #> A 1-Dimensional 'mfd' object: #> nobs: 5  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  evalarg <- list(argval1, argval2) mvmfd1$eval(evalarg) #> [[1]] #>                [,1]          [,2]          [,3]          [,4]          [,5] #>  [1,]  1.175889e-17 -5.566336e-17 -5.989427e-17 -8.533914e-18  4.282644e-17 #>  [2,]  2.703204e-01  3.303916e-01  3.904628e-01  4.505340e-01  5.106052e-01 #>  [3,]  4.548160e-01  5.558862e-01  6.569564e-01  7.580267e-01  8.590969e-01 #>  [4,]  4.949107e-01  6.048909e-01  7.148710e-01  8.248512e-01  9.348314e-01 #>  [5,]  3.778748e-01  4.618470e-01  5.458191e-01  6.297913e-01  7.137635e-01 #>  [6,]  1.408663e-01  1.721699e-01  2.034735e-01  2.347771e-01  2.660807e-01 #>  [7,] -1.408663e-01 -1.721699e-01 -2.034735e-01 -2.347771e-01 -2.660807e-01 #>  [8,] -3.778748e-01 -4.618470e-01 -5.458191e-01 -6.297913e-01 -7.137635e-01 #>  [9,] -4.949107e-01 -6.048909e-01 -7.148710e-01 -8.248512e-01 -9.348314e-01 #> [10,] -4.548160e-01 -5.558862e-01 -6.569564e-01 -7.580267e-01 -8.590969e-01 #> [11,] -2.703204e-01 -3.303916e-01 -3.904628e-01 -4.505340e-01 -5.106052e-01 #> [12,] -1.107058e-16 -2.053424e-16 -2.367877e-16 -2.126417e-16 -1.884957e-16 #>                [,6]          [,7]          [,8]          [,9]         [,10] #>  [1,] -8.600566e-18 -8.939168e-17  2.572277e-17 -1.368147e-17 -1.293677e-16 #>  [2,]  5.706764e-01  6.307476e-01  6.908188e-01  7.508900e-01  8.109612e-01 #>  [3,]  9.601671e-01  1.061237e+00  1.162308e+00  1.263378e+00  1.364448e+00 #>  [4,]  1.044812e+00  1.154792e+00  1.264772e+00  1.374752e+00  1.484732e+00 #>  [5,]  7.977357e-01  8.817078e-01  9.656800e-01  1.049652e+00  1.133624e+00 #>  [6,]  2.973844e-01  3.286880e-01  3.599916e-01  3.912952e-01  4.225988e-01 #>  [7,] -2.973844e-01 -3.286880e-01 -3.599916e-01 -3.912952e-01 -4.225988e-01 #>  [8,] -7.977357e-01 -8.817078e-01 -9.656800e-01 -1.049652e+00 -1.133624e+00 #>  [9,] -1.044812e+00 -1.154792e+00 -1.264772e+00 -1.374752e+00 -1.484732e+00 #> [10,] -9.601671e-01 -1.061237e+00 -1.162308e+00 -1.263378e+00 -1.364448e+00 #> [11,] -5.706764e-01 -6.307476e-01 -6.908188e-01 -7.508900e-01 -8.109612e-01 #> [12,] -2.671371e-16 -3.751426e-16 -2.872425e-16 -3.538611e-16 -4.967617e-16 #>  #> [[2]] #>              [,1]        [,2]        [,3]        [,4]       [,5]       [,6] #>  [1,]  0.20000000  0.34444444  0.48888889  0.63333333  0.7777778  0.9222222 #>  [2,]  0.16825071  0.28976511  0.41127950  0.53279390  0.6543083  0.7758227 #>  [3,]  0.08308300  0.14308739  0.20309178  0.26309617  0.3231006  0.3831050 #>  [4,] -0.02846297 -0.04901956 -0.06957614 -0.09013273 -0.1106893 -0.1312459 #>  [5,] -0.13097215 -0.22556314 -0.32015414 -0.41474513 -0.5093361 -0.6039271 #>  [6,] -0.19189859 -0.33049202 -0.46908545 -0.60767888 -0.7462723 -0.8848657 #>  [7,] -0.19189859 -0.33049202 -0.46908545 -0.60767888 -0.7462723 -0.8848657 #>  [8,] -0.13097215 -0.22556314 -0.32015414 -0.41474513 -0.5093361 -0.6039271 #>  [9,] -0.02846297 -0.04901956 -0.06957614 -0.09013273 -0.1106893 -0.1312459 #> [10,]  0.08308300  0.14308739  0.20309178  0.26309617  0.3231006  0.3831050 #> [11,]  0.16825071  0.28976511  0.41127950  0.53279390  0.6543083  0.7758227 #> [12,]  0.20000000  0.34444444  0.48888889  0.63333333  0.7777778  0.9222222 #>             [,7]       [,8]       [,9]      [,10] #>  [1,]  1.0666667  1.2111111  1.3555556  1.5000000 #>  [2,]  0.8973371  1.0188515  1.1403659  1.2618803 #>  [3,]  0.4431093  0.5031137  0.5631181  0.6231225 #>  [4,] -0.1518025 -0.1723591 -0.1929157 -0.2134723 #>  [5,] -0.6985181 -0.7931091 -0.8877001 -0.9822911 #>  [6,] -1.0234592 -1.1620526 -1.3006460 -1.4392395 #>  [7,] -1.0234592 -1.1620526 -1.3006460 -1.4392395 #>  [8,] -0.6985181 -0.7931091 -0.8877001 -0.9822911 #>  [9,] -0.1518025 -0.1723591 -0.1929157 -0.2134723 #> [10,]  0.4431093  0.5031137  0.5631181  0.6231225 #> [11,]  0.8973371  1.0188515  1.1403659  1.2618803 #> [12,]  1.0666667  1.2111111  1.3555556  1.5000000 #>  mvmfd1 + mvmfd1 #> A 'mvmfd' object with 2 variable(s): #>  #> Variable 1: #> A 1-Dimensional 'mfd' object: #> nobs: 10  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  #> Variable 2: #> A 1-Dimensional 'mfd' object: #> nobs: 10  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  mean(mvmfd1) #> A 'mvmfd' object with 2 variable(s): #>  #> Variable 1: #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  #>  #> Variable 2: #> A 1-Dimensional 'mfd' object: #> nobs: 1  #> basis 1: #> type: fourier #> nbasis: 5 #> support: 0 6.283185  inprod_mvmfd(mvmfd1, mvmfd1) #>           [,1]     [,2]     [,3]     [,4]     [,5]     [,6]      [,7]      [,8] #>  [1,] 0.911061 1.176351 1.441641 1.706931 1.972221 2.237511  2.502801  2.768090 #>  [2,] 1.176351 1.545973 1.915595 2.285217 2.654838 3.024460  3.394082  3.763704 #>  [3,] 1.441641 1.915595 2.389548 2.863502 3.337456 3.811410  4.285364  4.759318 #>  [4,] 1.706931 2.285217 2.863502 3.441788 4.020074 4.598360  5.176645  5.754931 #>  [5,] 1.972221 2.654838 3.337456 4.020074 4.702691 5.385309  6.067927  6.750545 #>  [6,] 2.237511 3.024460 3.811410 4.598360 5.385309 6.172259  6.959208  7.746158 #>  [7,] 2.502801 3.394082 4.285364 5.176645 6.067927 6.959208  7.850490  8.741772 #>  [8,] 2.768090 3.763704 4.759318 5.754931 6.750545 7.746158  8.741772  9.737385 #>  [9,] 3.033380 4.133326 5.233271 6.333217 7.433162 8.533108  9.633053 10.732999 #> [10,] 3.298670 4.502948 5.707225 6.911503 8.115780 9.320057 10.524335 11.728612 #>            [,9]     [,10] #>  [1,]  3.033380  3.298670 #>  [2,]  4.133326  4.502948 #>  [3,]  5.233271  5.707225 #>  [4,]  6.333217  6.911503 #>  [5,]  7.433162  8.115780 #>  [6,]  8.533108  9.320057 #>  [7,]  9.633053 10.524335 #>  [8,] 10.732999 11.728612 #>  [9,] 11.832944 12.932890 #> [10,] 12.932890 14.137167 norm_mvmfd(mvmfd1) #>  [1] 0.9544951 1.2433715 1.5458164 1.8552057 2.1685690 2.4844031 2.8018726 #>  [8] 3.1204783 3.4399047 3.7599424 plot(mvmfd1)  bimfdplot(mvmfd1)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"`mvnfd` class represents set multivariate multidimensional vector data. Constructor `mvnfd` objects (Mvnfd(...))","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"","code":"Mvnfd(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"... `nfd` objects separated comma","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"data numeric matrix data points. nobs Number observations. nvar number variables","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"mvnfd$new() mvnfd$print() mvnfd$clone()","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"Constructor `mvnfd` objects ('Mvnfd')","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"","code":"mvnfd$new(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"... `nfd` objects separated comma","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"Print method `mvnfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"","code":"mvnfd$print(...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"... Additional arguments passed `print`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"objects class cloneable method.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"","code":"mvnfd$clone(deep = FALSE)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"deep Whether make deep clone.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/mvnfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Set of Multivariate Multidimensional Vector Data objects — mvnfd","text":"","code":"# Create some vector data data_matrix1 <- matrix(rnorm(100), nrow = 10, ncol = 10) data_matrix2 <- matrix(rnorm(100), nrow = 10, ncol = 10) nfd_obj1 <- Nfd(data = data_matrix1) #> Error in Nfd(data = data_matrix1): could not find function \"Nfd\" nfd_obj2 <- Nfd(data = data_matrix2) #> Error in Nfd(data = data_matrix2): could not find function \"Nfd\" mvnfd_obj <- Mvnfd(nfd_obj1,nfd_obj2) #> Error: object 'nfd_obj1' not found print(mvnfd_obj) #> Error: object 'mvnfd_obj' not found nfd_obj$data #> Error: object 'nfd_obj' not found nfd_obj$nobs #> Error: object 'nfd_obj' not found"},{"path":"https://mmadoliat.github.io/MHPCA/reference/nfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Set of Multidimensional Non Functional Data Objects — nfd","title":"Define a Set of Multidimensional Non Functional Data Objects — nfd","text":"`nfd` class represents set multidimensional vector data. Vector data objects constructed specifying matrix data points.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/nfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Set of Multidimensional Non Functional Data Objects — nfd","text":"","code":"nfd(data)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/nfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Set of Multidimensional Non Functional Data Objects — nfd","text":"data numeric matrix data points.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the norm of an object of class `hd` — norm_hd","title":"Compute the norm of an object of class `hd` — norm_hd","text":"Compute norm object class `hd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the norm of an object of class `hd` — norm_hd","text":"","code":"norm_hd(hd_obj)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the norm of an object of class `hd` — norm_hd","text":"hd_obj `hd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the norm of an object of class `hd` — norm_hd","text":"norm vector object class `hd`","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the norm of an object of class `mfd` — norm_mfd","title":"Compute the norm of an object of class `mfd` — norm_mfd","text":"Compute norm object class `mfd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the norm of an object of class `mfd` — norm_mfd","text":"","code":"norm_mfd(mfd_obj)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the norm of an object of class `mfd` — norm_mfd","text":"mfd_obj object class `mfd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the norm of an object of class `mfd` — norm_mfd","text":"norm vector object class `mfd`","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mvmfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the norm of an object of class `mvmfd` — norm_mvmfd","title":"Compute the norm of an object of class `mvmfd` — norm_mvmfd","text":"Compute norm object class `mvmfd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mvmfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the norm of an object of class `mvmfd` — norm_mvmfd","text":"","code":"norm_mvmfd(mvmfd_obj)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mvmfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the norm of an object of class `mvmfd` — norm_mvmfd","text":"mvmfd_obj `mvmfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mvmfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the norm of an object of class `mvmfd` — norm_mvmfd","text":"norm vector object class `mvmfd`","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mvnfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inner product between two objects of class `mvnfd` — norm_mvnfd","title":"Compute the inner product between two objects of class `mvnfd` — norm_mvnfd","text":"Compute inner product two objects class `mvnfd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mvnfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inner product between two objects of class `mvnfd` — norm_mvnfd","text":"","code":"norm_mvnfd(mvnfd_obj1)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mvnfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the inner product between two objects of class `mvnfd` — norm_mvnfd","text":"mvnfd_obj `mvnfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_mvnfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the inner product between two objects of class `mvnfd` — norm_mvnfd","text":"norm `mvnfd` objects","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_nfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the norm objects of object `nfd` — norm_nfd","title":"Compute the norm objects of object `nfd` — norm_nfd","text":"Compute norm objects object `nfd`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_nfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the norm objects of object `nfd` — norm_nfd","text":"","code":"norm_nfd(nfd_obj1)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_nfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the norm objects of object `nfd` — norm_nfd","text":"nfd_obj `nfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/norm_nfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the norm objects of object `nfd` — norm_nfd","text":"norm `nfd` objects","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/pen_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Penalty Function — pen_fun","title":"Penalty Function — pen_fun","text":"Calculate penalty matrix `mvmfd` objects.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/pen_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Penalty Function — pen_fun","text":"","code":"pen_fun(data, devorder = 2, type)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/pen_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Penalty Function — pen_fun","text":"data object class `mvmfd`. devorder order derivative. type type penalty. types \"coefpen\" \"basispen\" supported.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/pen_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Penalty Function — pen_fun","text":"penalty matrix.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"plots an object of classes `mfd`, `mvmfd`, `hd`, `remfpca` or `mhpca` — plot","title":"plots an object of classes `mfd`, `mvmfd`, `hd`, `remfpca` or `mhpca` — plot","text":"plot object classes `mfd`, `mvmfd`, `hd`, `remfpca` `mhpca`","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plots an object of classes `mfd`, `mvmfd`, `hd`, `remfpca` or `mhpca` — plot","text":"","code":"plot(x, ...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plots an object of classes `mfd`, `mvmfd`, `hd`, `remfpca` or `mhpca` — plot","text":"x object classes `mfd`, `mvmfd`, `hd`, `remfpca` `mhpca` ... `plot` function arguments.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Addition of two `hd` objects — +.hd","title":"Addition of two `hd` objects — +.hd","text":"Addition two `hd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Addition of two `hd` objects — +.hd","text":"","code":"# S3 method for class 'hd' obj1 + NULL"},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Addition of two `hd` objects — +.hd","text":"obj1 `hd` object obj2 optional `hd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Addition of two `hd` objects — +.hd","text":"`hd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Add two `mfd` objects — +.mfd","title":"Add two `mfd` objects — +.mfd","text":"Add two `mfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add two `mfd` objects — +.mfd","text":"","code":"# S3 method for class 'mfd' obj1 + NULL"},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add two `mfd` objects — +.mfd","text":"obj1 `mfd` object obj2 `mfd` object scalar","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add two `mfd` objects — +.mfd","text":"sum two `mfd` objects","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mvmfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Addition of two `mvmfd` objects — +.mvmfd","title":"Addition of two `mvmfd` objects — +.mvmfd","text":"Addition two `mvmfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mvmfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Addition of two `mvmfd` objects — +.mvmfd","text":"","code":"# S3 method for class 'mvmfd' obj1 + NULL"},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mvmfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Addition of two `mvmfd` objects — +.mvmfd","text":"obj1 `mvmfd` object obj2 optional `mvmfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mvmfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Addition of two `mvmfd` objects — +.mvmfd","text":"`mvmfd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mvnfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Addition of two `mvnfd` objects — +.mvnfd","title":"Addition of two `mvnfd` objects — +.mvnfd","text":"Addition two `mvnfd` objects","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mvnfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Addition of two `mvnfd` objects — +.mvnfd","text":"","code":"# S3 method for class 'mvnfd' obj1 + obj2"},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mvnfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Addition of two `mvnfd` objects — +.mvnfd","text":"obj1 `mvnfd` object obj2 `mvnfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/plus-.mvnfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Addition of two `mvnfd` objects — +.mvnfd","text":"`mvnfd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/print.img.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — print.img","title":"Title — print.img","text":"Title","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/print.img.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — print.img","text":"","code":"# S3 method for class 'img' print(x, ...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/print.img.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — print.img","text":"x  ...","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/print.nfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for `nfd` Objects — print.nfd","title":"Print Method for `nfd` Objects — print.nfd","text":"function provides custom print method objects class `nfd`. displays header indicating object `nfd` object proceeds print underlying matrix data dimension.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/print.nfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for `nfd` Objects — print.nfd","text":"","code":"# S3 method for class 'nfd' print(x, ...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/print.nfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for `nfd` Objects — print.nfd","text":"x object class `nfd`. ... Additional arguments passed default print method.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/print.nfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for `nfd` Objects — print.nfd","text":"Invisibly returns input object `x` printing.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/print.nfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for `nfd` Objects — print.nfd","text":"","code":"# Create a standard matrix mat <- matrix(1:9, nrow = 3, ncol = 3)  # Convert the matrix to an 'nfd' object nfd_obj <- nfd(mat)  # Print the 'nfd' object print(nfd_obj) #> An object of class 'nfd': #> Dimensions: 3 x 3 #> Classes: nfd, matrix, array #>  #> First few entries: #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9"},{"path":"https://mmadoliat.github.io/MHPCA/reference/remfpca.html","id":null,"dir":"Reference","previous_headings":"","what":"A Class for `ReMFPCA` objects — remfpca","title":"A Class for `ReMFPCA` objects — remfpca","text":"`remfpca` class represents regularized functional principal components components. `remfpca` class represents regularized functional principal components ('ReMFPCs') components.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/remfpca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Class for `ReMFPCA` objects — remfpca","text":"","code":"Remfpca(   mvmfd_obj,   method = \"power\",   ncomp,   smooth_tuning = NULL,   sparse_tuning = NULL,   centerfns = TRUE,   alpha_orth = FALSE,   smoothing_type = \"basispen\",   sparse_type = \"soft\",   K_fold = 30,   sparse_CV = TRUE,   smooth_GCV = TRUE )"},{"path":"https://mmadoliat.github.io/MHPCA/reference/remfpca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Class for `ReMFPCA` objects — remfpca","text":"mvmfd_obj `mvmfd` object representing multivariate functional data. method character string specifying approach used MFPCA computation. Options \"power\" (default), uses power algorithm, \"eigen\", uses eigen decomposition approach. ncomp number functional principal components retain. smooth_tuning list vector specifying smoothing regularization parameter(s) variable. NULL, non-smoothing MFPCA estimated. sparse_tuning list vector specifying sparsity regularization parameter(s) variable. NULL, non-sparse MFPCA estimated. centerfns Logical indicating whether center functional data analysis. Default TRUE. alpha_orth Logical indicating whether perform orthogonalization regularization parameters. `method` \"power\", setting `alpha_orth = FALSE` (default) uses sequential power approach, setting `alpha_orth = TRUE` uses joint power approach. smoothing_type type smoothing penalty applied coefficients. types \"coefpen\" \"basispen\" supported. Default \"coefpen\". sparse_type type sparse penalty applied coefficients. types \"soft-threshold\", \"hard-threshold\" \"SCAD\" supported. Default \"soft-threshold\". K_fold integer specifying number folds sparse cross-validation process. Default 30. sparse_CV @param sparse_CV Logical indicating whether cross-validation applied select optimal sparse tuning parameter sequential power approach. `sparse_CV = TRUE`, series tuning parameters provided vector positive number max equals number subjects. `sparse_CV = FALSE`, specific tuning parameters given directly principal components. Tuning parameters provided vector length equal `ncomp`. dimensions input tuning parameters incorrect, converted list internally, warning issued. smooth_GCV @param smooth_GCV Logical indicating whether generalized cross-validation applied select optimal smooth tuning parameter. `smooth_GCV = TRUE`, series tuning parameters provided list length equal number variables. list incorrect dimensions provided, converted correct list internally, warning issued. `smooth_GCV = FALSE`, specific tuning parameters given directly. `method` \"power\" `alpha_orth = FALSE` (sequential power), tuning parameters provided list length equal number variables, element vector length `ncomp`. `method` \"power\" `alpha_orth = TRUE` (joint power), tuning parameters provided vector length equal number variables. dimensions input tuning parameters incorrect, converted list internally, warning issued.","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/remfpca.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"A Class for `ReMFPCA` objects — remfpca","text":"pc_mfd object class `mvmfd` first indices (fields) represents harmonics  second indices represents variables lsv = Left singular values vectors values = set eigenvalues smooth_tuning = list smoothing penalties parameters sparse_tuning = list sparse penalties parameters GCVs = Generalized cross validations scores smoothing penalties parameters. smoothing sparse tuning penalties used ReMFPCA method, represents conditional generalized cross-validation scores, means computed based optimal sparse tuning parameter selected via cross validation. CVs = Cross validations scores sparse penalties parameters mean_mfd multivariate functional data object giving mean function","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/remfpca.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"A Class for `ReMFPCA` objects — remfpca","text":"remfpca$new() remfpca$clone()","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/remfpca.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Class for `ReMFPCA` objects — remfpca","text":"","code":"remfpca$new(   mvmfd_obj,   method = \"power\",   ncomp,   smooth_tuning = NULL,   sparse_tuning = NULL,   centerfns = TRUE,   alpha_orth = FALSE,   smoothing_type = \"coefpen\",   sparse_type = \"soft\",   K_fold = 30,   sparse_CV,   smooth_GCV )"},{"path":"https://mmadoliat.github.io/MHPCA/reference/remfpca.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"A Class for `ReMFPCA` objects — remfpca","text":"objects class cloneable method.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/remfpca.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"A Class for `ReMFPCA` objects — remfpca","text":"","code":"remfpca$clone(deep = FALSE)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/remfpca.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Class for `ReMFPCA` objects — remfpca","text":"deep Whether make deep clone.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/remfpca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Class for `ReMFPCA` objects — remfpca","text":"","code":"require(fda) # Brownian Bridge simulation on [0,1] M <- 110 # number of components N <- 20 # number of instances n <- 100 # number of grides t0 <- seq(0, 1, len = n) j <- 1:M alpha1 <- list(a1 = 2^seq(0, 1, length.out = 3), a2 = 2^seq(0, 1, length.out = 3)) psi_1 <- function(t, m) sin(m * pi * t) # eigenfunction of BB psi_2 <- function(t, m) sin((2 * m - 1) * pi / 2 * t) # eigenfunction of BM PC_1 <- outer(t0, j, FUN = psi_1) # n by M matrix PC_2 <- outer(t0, j, FUN = psi_2) # n by M matrix Z <- matrix(rnorm(N * M), nr = M) lambda <- matrix(2 / (pi * (2 * j - 1)), nr = M, nc = N) X_1t <- PC_1 %*% (lambda * Z) X_2t <- PC_2 %*% (lambda * Z) noise <- rnorm(n * N, 0, 0.1) X_1 <- X_1t + noise X_2 <- X_2t + noise bs <- create.bspline.basis(c(0, 1), 51) mdbs <- Basismfd(bs) mfd1 <- Mfd(X = X_1, mdbs = mdbs) mfd2 <- Mfd(X = X_2, mdbs = mdbs) mvmfd_obj <- Mvmfd(mfd1, mfd2) k <- 2 Re0 <- Remfpca(mvmfd_obj, ncomp = k, alpha = c(0, 0)) #> Error in if (method == \"power\" & alpha_orth == \"FALSE\") {    if (is.vector(smooth_tuning) & !is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != ncomp) {                warning(\"The length of 'smooth_tuning' did not match 'ncomp' and has been adjusted accordingly.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = ncomp)            }            smooth_tuning <- replicate(mvmfd_obj$nvar, smooth_tuning,                 simplify = FALSE)        }        else {            warning(\"The length of 'smooth_tuning' did not match 'mvmfd_obj$nvar' and has been adjusted accordingly.\",                 call. = FALSE)            smooth_tuning <- replicate(mvmfd_obj$nvar, smooth_tuning,                 simplify = FALSE)        }    }    else if (is.matrix(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (!all(dim(smooth_tuning) == c(mvmfd_obj$nvar,                 ncomp))) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), rep(1:ncol(smooth_tuning),                   length.out = ncomp)]                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))            }        }        else {            if (dim(smooth_tuning)[1] != mvmfd_obj$nvar) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), , drop = FALSE][1:mvmfd_obj$nvar,                   , drop = FALSE]                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))            }        }    }    else if (is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }            smooth_tuning <- lapply(smooth_tuning, function(vec) {                if (length(vec) != ncomp) {                  warning(\"Adjusting vector length in 'smooth_tuning' to match 'ncomp'.\",                     call. = FALSE)                  vec <- rep(vec, length.out = ncomp)                }                vec            })        }        else {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }        }    }    if (!is.null(smooth_tuning)) {        names(smooth_tuning) <- paste0(\"var\", 1:mvmfd_obj$nvar)    }    if (sparse_CV == FALSE & length(sparse_tuning) != ncomp &         !is.null(sparse_tuning)) {        warning(\"The length of 'sparse_tuning' did not match 'ncomp' and has been adjusted accordingly.\",             call. = FALSE)        sparse_tuning <- rep(sparse_tuning, length.out = ncomp)    }    result <- sequential_power(mvmfd_obj = mvmfd_obj, n = ncomp,         smooth_tuning = smooth_tuning, sparse_tuning = sparse_tuning,         centerfns = centerfns, alpha_orth = alpha_orth, smooth_tuning_type = smoothing_type,         sparse_tuning_type = sparse_type, K_fold = K_fold, sparse_CV,         smooth_GCV)} else if (method == \"eigen\" || alpha_orth == \"TRUE\") {    if (is.vector(smooth_tuning) & !is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"The length of 'smooth_tuning' did not match number of variables and has been adjusted accordingly.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }            smooth_tuning <- lapply(1:mvmfd_obj$nvar, function(i) smooth_tuning[i])        }        else {            warning(\"The length of 'smooth_tuning' did not match number of variables and has been adjusted accordingly.\",                 call. = FALSE)            smooth_tuning <- replicate(mvmfd_obj$nvar, smooth_tuning,                 simplify = FALSE)        }    }    else if (is.matrix(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (!all(dim(smooth_tuning) == c(mvmfd_obj$nvar,                 1))) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), rep(1:ncol(smooth_tuning),                   length.out = 1)]                smooth_tuning <- as.list(smooth_tuning)                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- as.list(smooth_tuning)            }        }        else {            if (dim(smooth_tuning)[1] != mvmfd_obj$nvar) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), , drop = FALSE][1:mvmfd_obj$nvar,                   , drop = FALSE]                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))            }        }    }    else if (is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }            smooth_tuning <- lapply(smooth_tuning, function(vec) {                if (length(vec) != 1) {                  warning(\"Adjusting vector length in 'smooth_tuning' to match 'ncomp'.\",                     call. = FALSE)                  vec <- rep(vec, length.out = 1)                }                vec            })        }        else {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)[1:mvmfd_obj$nvar]            }        }    }    if (!is.null(smooth_tuning)) {        names(smooth_tuning) <- paste0(\"var\", 1:mvmfd_obj$nvar)    }    if (method == \"power\") {        result <- joint_power(mvmfd_obj = mvmfd_obj, n = ncomp,             smooth_tuning = smooth_tuning, centerfns = centerfns,             alpha_orth = alpha_orth, smooth_tuning_type = smoothing_type)    }    else {        result <- eigen_approach(mvmfd_obj = mvmfd_obj, n = ncomp,             alpha = smooth_tuning, centerfns = centerfns, penalty_type = smoothing_type)    }}: the condition has length > 1 fpc0 <- Re0$pc_mfd #> Error: object 'Re0' not found scores0 <- inprod_mvmfd(mvmfd_obj, fpc0) #> Error: object 'fpc0' not found dim(scores0) #> Error: object 'scores0' not found Re0$alpha #> Error: object 'Re0' not found Re1 <- Remfpca(mvmfd_obj, ncomp = k, alpha = alpha1) #> Error in if (method == \"power\" & alpha_orth == \"FALSE\") {    if (is.vector(smooth_tuning) & !is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != ncomp) {                warning(\"The length of 'smooth_tuning' did not match 'ncomp' and has been adjusted accordingly.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = ncomp)            }            smooth_tuning <- replicate(mvmfd_obj$nvar, smooth_tuning,                 simplify = FALSE)        }        else {            warning(\"The length of 'smooth_tuning' did not match 'mvmfd_obj$nvar' and has been adjusted accordingly.\",                 call. = FALSE)            smooth_tuning <- replicate(mvmfd_obj$nvar, smooth_tuning,                 simplify = FALSE)        }    }    else if (is.matrix(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (!all(dim(smooth_tuning) == c(mvmfd_obj$nvar,                 ncomp))) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), rep(1:ncol(smooth_tuning),                   length.out = ncomp)]                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))            }        }        else {            if (dim(smooth_tuning)[1] != mvmfd_obj$nvar) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), , drop = FALSE][1:mvmfd_obj$nvar,                   , drop = FALSE]                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))            }        }    }    else if (is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }            smooth_tuning <- lapply(smooth_tuning, function(vec) {                if (length(vec) != ncomp) {                  warning(\"Adjusting vector length in 'smooth_tuning' to match 'ncomp'.\",                     call. = FALSE)                  vec <- rep(vec, length.out = ncomp)                }                vec            })        }        else {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }        }    }    if (!is.null(smooth_tuning)) {        names(smooth_tuning) <- paste0(\"var\", 1:mvmfd_obj$nvar)    }    if (sparse_CV == FALSE & length(sparse_tuning) != ncomp &         !is.null(sparse_tuning)) {        warning(\"The length of 'sparse_tuning' did not match 'ncomp' and has been adjusted accordingly.\",             call. = FALSE)        sparse_tuning <- rep(sparse_tuning, length.out = ncomp)    }    result <- sequential_power(mvmfd_obj = mvmfd_obj, n = ncomp,         smooth_tuning = smooth_tuning, sparse_tuning = sparse_tuning,         centerfns = centerfns, alpha_orth = alpha_orth, smooth_tuning_type = smoothing_type,         sparse_tuning_type = sparse_type, K_fold = K_fold, sparse_CV,         smooth_GCV)} else if (method == \"eigen\" || alpha_orth == \"TRUE\") {    if (is.vector(smooth_tuning) & !is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"The length of 'smooth_tuning' did not match number of variables and has been adjusted accordingly.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }            smooth_tuning <- lapply(1:mvmfd_obj$nvar, function(i) smooth_tuning[i])        }        else {            warning(\"The length of 'smooth_tuning' did not match number of variables and has been adjusted accordingly.\",                 call. = FALSE)            smooth_tuning <- replicate(mvmfd_obj$nvar, smooth_tuning,                 simplify = FALSE)        }    }    else if (is.matrix(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (!all(dim(smooth_tuning) == c(mvmfd_obj$nvar,                 1))) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), rep(1:ncol(smooth_tuning),                   length.out = 1)]                smooth_tuning <- as.list(smooth_tuning)                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- as.list(smooth_tuning)            }        }        else {            if (dim(smooth_tuning)[1] != mvmfd_obj$nvar) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), , drop = FALSE][1:mvmfd_obj$nvar,                   , drop = FALSE]                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))            }        }    }    else if (is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }            smooth_tuning <- lapply(smooth_tuning, function(vec) {                if (length(vec) != 1) {                  warning(\"Adjusting vector length in 'smooth_tuning' to match 'ncomp'.\",                     call. = FALSE)                  vec <- rep(vec, length.out = 1)                }                vec            })        }        else {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)[1:mvmfd_obj$nvar]            }        }    }    if (!is.null(smooth_tuning)) {        names(smooth_tuning) <- paste0(\"var\", 1:mvmfd_obj$nvar)    }    if (method == \"power\") {        result <- joint_power(mvmfd_obj = mvmfd_obj, n = ncomp,             smooth_tuning = smooth_tuning, centerfns = centerfns,             alpha_orth = alpha_orth, smooth_tuning_type = smoothing_type)    }    else {        result <- eigen_approach(mvmfd_obj = mvmfd_obj, n = ncomp,             alpha = smooth_tuning, centerfns = centerfns, penalty_type = smoothing_type)    }}: the condition has length > 1 Re1$alpha #> Error: object 'Re1' not found Re3 <- Remfpca(mfd1, ncomp = k, alpha = alpha1$a1) #> Error in if (method == \"power\" & alpha_orth == \"FALSE\") {    if (is.vector(smooth_tuning) & !is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != ncomp) {                warning(\"The length of 'smooth_tuning' did not match 'ncomp' and has been adjusted accordingly.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = ncomp)            }            smooth_tuning <- replicate(mvmfd_obj$nvar, smooth_tuning,                 simplify = FALSE)        }        else {            warning(\"The length of 'smooth_tuning' did not match 'mvmfd_obj$nvar' and has been adjusted accordingly.\",                 call. = FALSE)            smooth_tuning <- replicate(mvmfd_obj$nvar, smooth_tuning,                 simplify = FALSE)        }    }    else if (is.matrix(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (!all(dim(smooth_tuning) == c(mvmfd_obj$nvar,                 ncomp))) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), rep(1:ncol(smooth_tuning),                   length.out = ncomp)]                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))            }        }        else {            if (dim(smooth_tuning)[1] != mvmfd_obj$nvar) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), , drop = FALSE][1:mvmfd_obj$nvar,                   , drop = FALSE]                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))            }        }    }    else if (is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }            smooth_tuning <- lapply(smooth_tuning, function(vec) {                if (length(vec) != ncomp) {                  warning(\"Adjusting vector length in 'smooth_tuning' to match 'ncomp'.\",                     call. = FALSE)                  vec <- rep(vec, length.out = ncomp)                }                vec            })        }        else {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }        }    }    if (!is.null(smooth_tuning)) {        names(smooth_tuning) <- paste0(\"var\", 1:mvmfd_obj$nvar)    }    if (sparse_CV == FALSE & length(sparse_tuning) != ncomp &         !is.null(sparse_tuning)) {        warning(\"The length of 'sparse_tuning' did not match 'ncomp' and has been adjusted accordingly.\",             call. = FALSE)        sparse_tuning <- rep(sparse_tuning, length.out = ncomp)    }    result <- sequential_power(mvmfd_obj = mvmfd_obj, n = ncomp,         smooth_tuning = smooth_tuning, sparse_tuning = sparse_tuning,         centerfns = centerfns, alpha_orth = alpha_orth, smooth_tuning_type = smoothing_type,         sparse_tuning_type = sparse_type, K_fold = K_fold, sparse_CV,         smooth_GCV)} else if (method == \"eigen\" || alpha_orth == \"TRUE\") {    if (is.vector(smooth_tuning) & !is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"The length of 'smooth_tuning' did not match number of variables and has been adjusted accordingly.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }            smooth_tuning <- lapply(1:mvmfd_obj$nvar, function(i) smooth_tuning[i])        }        else {            warning(\"The length of 'smooth_tuning' did not match number of variables and has been adjusted accordingly.\",                 call. = FALSE)            smooth_tuning <- replicate(mvmfd_obj$nvar, smooth_tuning,                 simplify = FALSE)        }    }    else if (is.matrix(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (!all(dim(smooth_tuning) == c(mvmfd_obj$nvar,                 1))) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), rep(1:ncol(smooth_tuning),                   length.out = 1)]                smooth_tuning <- as.list(smooth_tuning)                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- as.list(smooth_tuning)            }        }        else {            if (dim(smooth_tuning)[1] != mvmfd_obj$nvar) {                smooth_tuning <- smooth_tuning[rep(1:nrow(smooth_tuning),                   length.out = mvmfd_obj$nvar), , drop = FALSE][1:mvmfd_obj$nvar,                   , drop = FALSE]                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))                warning(\"The dimensions of 'smooth_tuning' did not match the expected size and have been adjusted accordingly.\",                   call. = FALSE)            }            else {                smooth_tuning <- split(smooth_tuning, row(smooth_tuning))            }        }    }    else if (is.list(smooth_tuning)) {        if (smooth_GCV == FALSE) {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)            }            smooth_tuning <- lapply(smooth_tuning, function(vec) {                if (length(vec) != 1) {                  warning(\"Adjusting vector length in 'smooth_tuning' to match 'ncomp'.\",                     call. = FALSE)                  vec <- rep(vec, length.out = 1)                }                vec            })        }        else {            if (length(smooth_tuning) != mvmfd_obj$nvar) {                warning(\"Adjusting 'smooth_tuning' to match 'mvmfd_obj$nvar'.\",                   call. = FALSE)                smooth_tuning <- rep(smooth_tuning, length.out = mvmfd_obj$nvar)[1:mvmfd_obj$nvar]            }        }    }    if (!is.null(smooth_tuning)) {        names(smooth_tuning) <- paste0(\"var\", 1:mvmfd_obj$nvar)    }    if (method == \"power\") {        result <- joint_power(mvmfd_obj = mvmfd_obj, n = ncomp,             smooth_tuning = smooth_tuning, centerfns = centerfns,             alpha_orth = alpha_orth, smooth_tuning_type = smoothing_type)    }    else {        result <- eigen_approach(mvmfd_obj = mvmfd_obj, n = ncomp,             alpha = smooth_tuning, centerfns = centerfns, penalty_type = smoothing_type)    }}: the condition has length > 1 Re3$alpha #> Error: object 'Re3' not found"},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale.html","id":null,"dir":"Reference","previous_headings":"","what":"scale of an object of class `mfd`, `mvmfd`, `nfd`, `mvnfd` or `hd`.. — scale","title":"scale of an object of class `mfd`, `mvmfd`, `nfd`, `mvnfd` or `hd`.. — scale","text":"Standard deviation object class `mfd`, `mvmfd`, `nfd`, `mvnfd` `hd`..","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scale of an object of class `mfd`, `mvmfd`, `nfd`, `mvnfd` or `hd`.. — scale","text":"","code":"scale(x, ...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scale of an object of class `mfd`, `mvmfd`, `nfd`, `mvnfd` or `hd`.. — scale","text":"x object class `mfd`, `mvmfd`, `nfd`, `mvnfd` `hd`. ... `scale` function arguments.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"scale of an object of class `mfd`, `mvmfd`, `nfd`, `mvnfd` or `hd`.. — scale","text":"object class `mfd`, `mvmfd`, `nfd`, `mvnfd` `hd`.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a `hd` Object — scale_hd","title":"Scale a `hd` Object — scale_hd","text":"function scales `hd` object, may consist multivariate functional data `mvmfd` /`mvnfd`. function ensures proper scaling components based respective types returns scaled `hd` object.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a `hd` Object — scale_hd","text":"","code":"scale_hd(   hd_obj,   f_weight = NULL,   nf_weight = NULL,   mf_eval_length = NULL,   scale_components = FALSE )"},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a `hd` Object — scale_hd","text":"hd_obj `hd` object, can `mfd`, `mvmfd`, `nfd`, `mvnfd`. f_weight numeric vector scaling factors functional variables. length must match number functional variables. nf_weight numeric vector scaling factors non-functional variables. length must match number non functional variables. mfd_eval_length numeric vector specifying number evaluation points functional variables.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale a `hd` Object — scale_hd","text":"scaled high-dimensional data object class 'Hd'.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_hd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a `hd` Object — scale_hd","text":"","code":"# Example usage: # Assuming `hd_obj` is a valid high-dimensional data object: # scaled_hd <- scale_hd(hd_obj, mfd_eval_length = c(100, 200), weight = c(0.5, 0.8, 1.2))"},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale an `mfd` Object — scale_mfd","title":"Scale an `mfd` Object — scale_mfd","text":"function scales `mfd` object calculating scaling factor based variance evaluations using provided weight. returns new scaled `mfd` object.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale an `mfd` Object — scale_mfd","text":"","code":"scale_mfd(mfd_obj, mfd_eval_length = 100, weight = NULL)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale an `mfd` Object — scale_mfd","text":"mfd_obj object class `mfd`. mfd_eval_length number evaluation points use scaling. weight optional numeric value use scaling factor. NULL, scaling factor calculated automatically.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale an `mfd` Object — scale_mfd","text":"scaled mfd object.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale an `mfd` Object — scale_mfd","text":"","code":"# Example usage: # Assuming `mfd_obj` is a valid mfd object: # scaled_mfd <- scale_mfd(mfd_obj, mfd_eval_length = 100) # scaled_mfd <- scale_mfd(mfd_obj, mfd_eval_length = 100, weight = 0.5)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mvmfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a `mvmfd` Object — scale_mvmfd","title":"Scale a `mvmfd` Object — scale_mvmfd","text":"function scales `mvmfd` object scaling functional variable independently using either calculated user-provided weight. returns new scaled `mvmfd` object.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mvmfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a `mvmfd` Object — scale_mvmfd","text":"","code":"scale_mvmfd(   mvmfd_obj,   mvmfd_eval_length = rep(100, mvmfd_obj$nvar),   weight = NULL )"},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mvmfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a `mvmfd` Object — scale_mvmfd","text":"mvmfd_obj object class `mvmfd`. mvmfd_eval_length numeric vector specifying number evaluation points functional variable. weight optional numeric vector scaling factors functional variable. NULL, scaling factors calculated automatically.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mvmfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale a `mvmfd` Object — scale_mvmfd","text":"scaled mvmfd object.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mvmfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a `mvmfd` Object — scale_mvmfd","text":"","code":"# Example usage: # Assuming `mvmfd_obj` is a valid mvmfd object: # scaled_mvmfd <- scale_mvmfd(mvmfd_obj, mvmfd_eval_length = c(100, 200)) # scaled_mvmfd <- scale_mvmfd(mvmfd_obj, mvmfd_eval_length = c(100, 200), weight = c(0.5, 0.8))"},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mvnfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale an `mvnfd` Object — scale_mvnfd","title":"Scale an `mvnfd` Object — scale_mvnfd","text":"function scales `mvnfd` object calculating scaling factor based variance evaluations using provided weight. returns new scaled `mvnfd` object.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mvnfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale an `mvnfd` Object — scale_mvnfd","text":"","code":"scale_mvnfd(mvnfd_obj, weight = NULL)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mvnfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale an `mvnfd` Object — scale_mvnfd","text":"mvnfd_obj object class `mvnfd`. weight optional numeric vector scaling factors variable. NULL, scaling factors calculated automatically.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_mvnfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale an `mvnfd` Object — scale_mvnfd","text":"scaled mvnfd object.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_nfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a `nfd` Object — scale_nfd","title":"Scale a `nfd` Object — scale_nfd","text":"function scales `nfd` object using provided weight calculating scaling factor based variance object. scaled `nfd` object returned.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_nfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a `nfd` Object — scale_nfd","text":"","code":"scale_nfd(nfd_obj, weight = NULL)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_nfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a `nfd` Object — scale_nfd","text":"nfd_obj `nfd` object scaled. weight optional numeric value use scaling factor. NULL, scaling factor calculated automatically.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_nfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale a `nfd` Object — scale_nfd","text":"scaled `nfd` object.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/scale_nfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a `nfd` Object — scale_nfd","text":"","code":"# Example usage: # Assuming `nfd_obj` is a valid numeric functional data object: # scaled_nfd <- scale_nfd(nfd_obj) # scaled_nfd <- scale_nfd(nfd_obj, weight = 0.5)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard deviation of an object of class `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` or `hd`.. — sd","title":"Standard deviation of an object of class `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` or `hd`.. — sd","text":"Standard deviation object class `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` `hd`..","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard deviation of an object of class `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` or `hd`.. — sd","text":"","code":"sd(x, ...)"},{"path":"https://mmadoliat.github.io/MHPCA/reference/sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard deviation of an object of class `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` or `hd`.. — sd","text":"x object class `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` `hd`. ... `sd` function arguments.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard deviation of an object of class `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` or `hd`.. — sd","text":"object class `mfd`, `mvmfd`, `nfd`, `mvnfd`, `mvmfd` `hd`.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract subsets of an `hd` object — [.hd","title":"Extract subsets of an `hd` object — [.hd","text":"Extract subsets `hd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract subsets of an `hd` object — [.hd","text":"","code":"# S3 method for class 'hd' hd_obj[i = NULL, j = NULL]"},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract subsets of an `hd` object — [.hd","text":"hd_obj `hd` object index indices specifying subsets extract first dimension j index indices specifying subsets extract second dimension","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract subsets of an `hd` object — [.hd","text":"`hd` object containing specified subsets","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract subsets of an `mfd` object — [.mfd","title":"Extract subsets of an `mfd` object — [.mfd","text":"Extract subsets `mfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract subsets of an `mfd` object — [.mfd","text":"","code":"# S3 method for class 'mfd' mfd_obj[i = \"index\"]"},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract subsets of an `mfd` object — [.mfd","text":"mfd_obj `mfd` object index indices specifying subsets extract","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract subsets of an `mfd` object — [.mfd","text":"`mfd` object containing specified subsets","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mvmfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract subsets of an `mvmfd` object — [.mvmfd","title":"Extract subsets of an `mvmfd` object — [.mvmfd","text":"Extract subsets `mvmfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mvmfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract subsets of an `mvmfd` object — [.mvmfd","text":"","code":"# S3 method for class 'mvmfd' mvmfd_obj[i = \"index\", j = \"index\"]"},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mvmfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract subsets of an `mvmfd` object — [.mvmfd","text":"mvmfd_obj `mvmfd` object index indices specifying subsets extract first dimension j index indices specifying subsets extract second dimension","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mvmfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract subsets of an `mvmfd` object — [.mvmfd","text":"`mvmfd` object containing specified subsets","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mvnfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract subsets of an `mvnfd` object — [.mvnfd","title":"Extract subsets of an `mvnfd` object — [.mvnfd","text":"Extract subsets `mvnfd` object","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mvnfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract subsets of an `mvnfd` object — [.mvnfd","text":"","code":"# S3 method for class 'mvnfd' mvnfd_obj[i = NULL, j = NULL]"},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mvnfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract subsets of an `mvnfd` object — [.mvnfd","text":"mvnfd_obj `mvnfd` object index indices specifying subsets extract first dimension j index indices specifying subsets extract second dimension","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.mvnfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract subsets of an `mvnfd` object — [.mvnfd","text":"`mvnfd` object containing specified subsets","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.nfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Method for 'nfd' Objects — [.nfd","title":"Subset Method for 'nfd' Objects — [.nfd","text":"function allows subsetting 'nfd' objects using `[ ]` operator. result subsetting operation returned 'nfd' object.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.nfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Method for 'nfd' Objects — [.nfd","text":"","code":"# S3 method for class 'nfd' x[...]"},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.nfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Method for 'nfd' Objects — [.nfd","text":"x object class `nfd`. ... arguments passed methods. (optional) Numeric, logical, character vector specifying rows extract. j (optional) Numeric, logical, character vector specifying columns extract. drop Logical indicating whether drop dimensions (default `FALSE`).","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.nfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Method for 'nfd' Objects — [.nfd","text":"`nfd` object containing subset original data.","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/sub-.nfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset Method for 'nfd' Objects — [.nfd","text":"","code":"# Define the 'nfd' class constructor nfd <- function(data) {   if (!is.matrix(data) && !is.array(data)) {     stop(\"Input must be a matrix or an array.\")   }   class(data) <- c(\"nfd\", class(data))   return(data) }  # Create an 'nfd' object mat <- matrix(1:12, nrow = 3, ncol = 4) nfd_obj <- nfd(mat)  # Subset rows and columns subset_nfd <- nfd_obj[1:2, 3:4] print(subset_nfd) #> An object of class 'nfd': #> Dimensions: 2 x 2 #> Classes: nfd, matrix, array #>  #> First few entries: #>      [,1] [,2] #> [1,]    7   10 #> [2,]    8   11 print(class(subset_nfd))  # Should include 'nfd' #> [1] \"nfd\"    \"matrix\" \"array\""},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiplication of an `hd` object with a scalar — *.hd","title":"Multiplication of an `hd` object with a scalar — *.hd","text":"Multiplication `hd` object scalar","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiplication of an `hd` object with a scalar — *.hd","text":"","code":"# S3 method for class 'hd' obj1 * obj2"},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiplication of an `hd` object with a scalar — *.hd","text":"obj1 `hd` object scalar obj2 `hd` object scalar","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiplication of an `hd` object with a scalar — *.hd","text":"`hd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Scalar multiplication of an `mfd` object — *.mfd","title":"Scalar multiplication of an `mfd` object — *.mfd","text":"Scalar multiplication `mfd` object. One object must `mfd`, one scalar","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scalar multiplication of an `mfd` object — *.mfd","text":"","code":"# S3 method for class 'mfd' obj1 * obj2"},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scalar multiplication of an `mfd` object — *.mfd","text":"obj1 `mfd` object scalar obj2 `mfd` object scalar","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scalar multiplication of an `mfd` object — *.mfd","text":"`mfd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mvmfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiplication of an `mvmfd` object with a scalar — *.mvmfd","title":"Multiplication of an `mvmfd` object with a scalar — *.mvmfd","text":"Multiplication `mvmfd` object scalar","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mvmfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiplication of an `mvmfd` object with a scalar — *.mvmfd","text":"","code":"# S3 method for class 'mvmfd' obj1 * obj2"},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mvmfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiplication of an `mvmfd` object with a scalar — *.mvmfd","text":"obj1 `mvmfd` object scalar obj2 `mvmfd` object scalar","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mvmfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiplication of an `mvmfd` object with a scalar — *.mvmfd","text":"`mvmfd` object","code":""},{"path":[]},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mvnfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiplication of an `mvnfd` object with a scalar — *.mvnfd","title":"Multiplication of an `mvnfd` object with a scalar — *.mvnfd","text":"Multiplication `mvnfd` object scalar","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mvnfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiplication of an `mvnfd` object with a scalar — *.mvnfd","text":"","code":"# S3 method for class 'mvnfd' obj1 * obj2"},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mvnfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiplication of an `mvnfd` object with a scalar — *.mvnfd","text":"obj1 `mvnfd` object scalar obj2 `mvnfd` object scalar","code":""},{"path":"https://mmadoliat.github.io/MHPCA/reference/times-.mvnfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiplication of an `mvnfd` object with a scalar — *.mvnfd","text":"`mvnfd` object","code":""},{"path":[]}]
