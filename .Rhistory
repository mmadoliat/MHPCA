set1 <- df$V1[df$V2 == 1 & df$V3 == "yes"]
df$V1[df$V2 == 1 & df$V3 == "yes"]
df$V1[df$V2 == 1 & df$V3 == "no"]
df$V1[df$V2 == 2 & df$V3 == "yes"]
df$V1[df$V2 == 2 & df$V3 == "no"]
plot_xy_map(xy_map_adj)
# Example function to plot each row of xy_map
plot_xy_map <- function(xy_map, time_points = seq(0, 119, length.out = ncol(xy_map))) {
par(mfrow = c(7, 3),mar = c(1, 1, 2, 1))
row_names <- rownames(xy_map)
for (i in 1:nrow(xy_map)) {
plot(time_points, xy_map[i, ], type = "l",
main = row_names[i], xlab = "", ylab = "")
}
par(mfrow = c(1, 1))
}
plot_xy_map(xy_map_adj)
xy_map_adj |> dim()
significant_tf <- c("ACE2", "SWI4", "SWI5", "SWI6", "MBP1", "STB1", "FKH1", "FKH2",
"NDD1", "MCM1", "ABF1", "BAS1", "CBF1", "GCN4", "GCR1", "GCR2",
"LEU3", "MET31", "REB1", "SKN7", "STE12")
rownames(xy_map) <- gsub("_YPD", "", rownames(xy_map))
xy_map <- xy_map[significant_tf,]
xy_map_adj <- adj_sign(xy_map,xy_map[1,])
plot_xy_map(xy_map_adj)
for (1 in 1:nrow(xy_map_adj)) {
for (i in 1:nrow(xy_map_adj)) {
print(xy_map_adj[1,]*xy_map_adj[i,])
}
for (i in 1:nrow(xy_map_adj)) {
print(xy_map_adj[1,]*xy_map_adj[i,] |> sum())
}
for (i in 1:nrow(xy_map_adj)) {
print(sum(xy_map_adj[1,]*xy_map_adj[i,]))
}
xy_map <- t(x_reconstruction)%*%y_reconstruction
xy_map <- xy_map[-significant_tf,]
significant_tf
xy_map
xy_map |> rownames()
rownames(xy_map) <- gsub("_YPD", "", rownames(xy_map))
xy_map <- xy_map[-significant_tf,]
xy_map[-significant_tf,]
xy_map <- xy_map[-(significant_tf),]
xy_map <- xy_map[(significant_tf),]
xy_map <- t(x_reconstruction)%*%y_reconstruction
significant_tf <- c("ACE2", "SWI4", "SWI5", "SWI6", "MBP1", "STB1", "FKH1", "FKH2",
"NDD1", "MCM1", "ABF1", "BAS1", "CBF1", "GCN4", "GCR1", "GCR2",
"LEU3", "MET31", "REB1", "SKN7", "STE12")
rownames(xy_map) <- gsub("_YPD", "", rownames(xy_map))
kkk <- setdiff(rownames(xy_map),significant_tf)
kkk
xy_map <- xy_map[kkk,]
plot_xy_map(xy_map[1:21,])
xy_map <- t(x_reconstruction)%*%y_reconstruction
significant_tf <- c("ACE2", "SWI4", "SWI5", "SWI6", "MBP1", "STB1", "FKH1", "FKH2",
"NDD1", "MCM1", "ABF1", "BAS1", "CBF1", "GCN4", "GCR1", "GCR2",
"LEU3", "MET31", "REB1", "SKN7", "STE12")
rownames(xy_map) <- gsub("_YPD", "", rownames(xy_map))
xy_map <- xy_map[(significant_tf),]
# Example function to plot each row of xy_map
plot_xy_map <- function(xy_map, time_points = seq(0, 119, length.out = ncol(xy_map))) {
par(mfrow = c(7, 3),mar = c(1, 1, 2, 1))
row_names <- rownames(xy_map)
for (i in 1:nrow(xy_map)) {
plot(time_points, xy_map[i, ], type = "l",
main = row_names[i], xlab = "", ylab = "")
}
par(mfrow = c(1, 1))
}
xy_map_adj <- adj_sign(xy_map,xy_map[1,])
plot_xy_map(xy_map_adj)
xy_map_adj
xy_map_adj |> dim()
library(spls)
data("yeast")
# ChIP-chip data
x <- yeast$x
# gene expression functional 542 genes and and each column is mrna level measure at each 7 minutes
y <- yeast$y
rm(yeast)
# Create B-spline basis and multivariate functional data (mfd) objects
v1 <- t(y)
scaling_factor_tfunction <- sqrt(mean(diag(var(v1))))
v1 <- 1/sqrt(mean(diag(var(v1))))*v1
nbasis_f <- 10
t0_f <- 0
t1_f <- 119
grid_point <- ncol(y)
t <- seq(t0_f, t1_f, length.out = grid_point)
bspline_basis <- fda::create.bspline.basis(c(t0_f,t1_f),nbasis_f)
mfd_basis <- ReMFPCA::basismfd$new(bspline_basis)
mfd_v1 <- ReMFPCA::mfd$new(t,v1,mfd_basis)
Mvmfd_obj <- ReMFPCA::mvmfd$new(list(mfd_v1,mfd_v1))
#vector data
vector_data <- x
scaling_factor_vector <- sqrt(mean(diag(var(vector_data))))
vector_data <- 1/scaling_factor_vector*vector_data
#model
alpha2 <- list(a1 = 2^seq(-10, 3, length.out = 20),a2 = 2^seq(-10, 3, length.out = 20))
result_yue <- ReMFPCA::Remfpca(mvmfd_obj = Mvmfd_obj,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0)
result_soroush <- ReMFPCA::Remfpca(mvmfd_obj = Mvmfd_obj,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0,vdata = vector_data)
library("ReMFPCA")
library(spls)
data("yeast")
# ChIP-chip data
x <- yeast$x
# gene expression functional 542 genes and and each column is mrna level measure at each 7 minutes
y <- yeast$y
rm(yeast)
# Create B-spline basis and multivariate functional data (mfd) objects
v1 <- t(y)
scaling_factor_tfunction <- sqrt(mean(diag(var(v1))))
v1 <- 1/sqrt(mean(diag(var(v1))))*v1
v1
scaling_factor_tfunction
nbasis_f <- 10
t0_f <- 0
t1_f <- 119
grid_point <- ncol(y)
t <- seq(t0_f, t1_f, length.out = grid_point)
bspline_basis <- fda::create.bspline.basis(c(t0_f,t1_f),nbasis_f)
plot(bspline_basis)
t1_f <- 119
grid_point <- ncol(y)
t <- seq(t0_f, t1_f, length.out = grid_point)
bspline_basis <- fda::create.bspline.basis(c(t0_f,t1_f),nbasis_f)
mfd_basis <- ReMFPCA::basismfd$new(bspline_basis)
library(spls)
data("yeast")
# ChIP-chip data
x <- yeast$x
# gene expression functional 542 genes and and each column is mrna level measure at each 7 minutes
y <- yeast$y
rm(yeast)
# Create B-spline basis and multivariate functional data (mfd) objects
v1 <- t(y)
scaling_factor_tfunction <- sqrt(mean(diag(var(v1))))
v1 <- 1/sqrt(mean(diag(var(v1))))*v1
nbasis_f <- 10
t0_f <- 0
t1_f <- 119
grid_point <- ncol(y)
t <- seq(t0_f, t1_f, length.out = grid_point)
bspline_basis <- fda::create.bspline.basis(c(t0_f,t1_f),nbasis_f)
mfd_basis <- MHPCA::basismfd$new(bspline_basis)
mfd_v1 <- MHPCA::mfd$new(t,v1,mfd_basis)
Mvmfd_obj <- MHPCA::mvmfd$new(list(mfd_v1,mfd_v1))
plot(mfd_basis)
plot(mfd_v1)
plot(Mvmfd_obj)
MHPCA::mvmfd$new(list(mfd_v1))
MHPCA::mvmfd$new(list(mfd_v1,mfd_v1))
MHPCA::mvmfd$new(list(mfd_v1))
Mvmfd_obj <- MHPCA::mvmfd$new(list(mfd_v1))
Mvmfd_obj <- MHPCA::mvmfd$new(list(mfd_v1,mfd_v1))
Mvmfd_obj1 <- MHPCA::mvmfd$new(list(mfd_v1))
Mvmfd_obj2 <- MHPCA::mvmfd$new(list(mfd_v1,mfd_v1))
#vector data
vector_data <- x
scaling_factor_vector <- sqrt(mean(diag(var(vector_data))))
vector_data <- 1/scaling_factor_vector*vector_data
#model
alpha2 <- list(a1 = 2^seq(-10, 3, length.out = 20),a2 = 2^seq(-10, 3, length.out = 20))
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0)
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj1,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0)
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj1,ncomp = 4)
?MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj1,ncomp = 4,method = "")
MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj1,ncomp = 4,method = "eigen")
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj1,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0)
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj1,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0, method="eigen")
detach("package:MHPCA", unload = TRUE)
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0)
prod(mvmfd_obj$basis$nbasis[[2]])
smooth_tuning
smooth_tuning
smooth_tuning
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj1,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0)
prod(mvmfd_obj$basis$nbasis[[2]])
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0)
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj1,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0)
system.time(result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj1,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0))
system.time(result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0))
Mvmfd_obj <- MHPCA::mvmfd$new(mfd_v1)
Mvmfd_obj
#vector data
vector_data <- x
scaling_factor_vector <- sqrt(mean(diag(var(vector_data))))
vector_data <- 1/scaling_factor_vector*vector_data
#model
alpha2 <- list(a1 = 2^seq(-10, 3, length.out = 20),a2 = 2^seq(-10, 3, length.out = 20))
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0)
result_soroush <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0,vdata = vector_data)
# TF selection
significant_tf <- c("ACE2", "SWI4", "SWI5", "SWI6", "MBP1", "STB1", "FKH1", "FKH2",
"NDD1", "MCM1", "ABF1", "BAS1", "CBF1", "GCN4", "GCR1", "GCR2",
"LEU3", "MET31", "REB1", "SKN7", "STE12")
result_soroush$vector_pc
abs(result_soroush$vector_pc)
abs(result_soroush$vector_pc)[,1]
sort(abs(result_soroush$vector_pc)[,1])
Mvmfd_obj2 <- MHPCA::mvmfd$new(list(mfd_v1,mfd_v1))
#model
alpha2 <- list(a1 = 2^seq(-10, 3, length.out = 20),a2 = 2^seq(-10, 3, length.out = 20))
result_yue <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0)
system.time(result_soroush <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0,vdata = vector_data))
system.time(result_soroush2 <- MHPCA::Remfpca(mvmfd_obj = Mvmfd_obj2,ncomp = 4,smooth_tuning = alpha2,sparse_tuning = 0,vdata = vector_data))
result_soroush$vector_pc
matplot(result_soroush$vector_pc)
plot(result_soroush$vector_pc)
matrixplot(result_soroush$vector_pc)
matrixplot(result_soroush$vector_pc)
pairs(result_soroush$vector_pc)
pairs(result_soroush2$vector_pc)
sort(abs(result_soroush$vector_pc)[,1])
sort(abs(result_soroush2$vector_pc)[,1])
result_soroush2$mean_mfd
plot(result_soroush2$mean_mfd)
plot(result_soroush$mean_mfd)
plot(result_soroush2$mean_mfd[1])
plot(result_soroush2$mean_mfd[1,])
plot(result_soroush2$mean_mfd[,1])
plot(result_soroush$mean_mfd)
plot(result_soroush$pc_mfd)
plot(result_soroush2$pc_mfd)
plot(result_soroush2$pc_mfd[,1])
plot(result_soroush$pc_mfd)
plot(result_soroush$pc_mfd,col=1)
plot(result_soroush$pc_mfd,col=1:2)
plot(result_soroush$pc_mfd,col=1:3)
plot(result_soroush$pc_mfd,col=1:4)
plot(result_soroush2$pc_mfd[,1])
plot(result_soroush2$pc_mfd[,1,col=1:3])
plot(result_soroush2$pc_mfd[,1],col=1:3)
plot(result_soroush2$pc_mfd[1,1])
plot(result_soroush$pc_mfd[,1],col=1:4)
plot(result_soroush$pc_mfd[1],col=1:4)
plot(result_soroush$pc_mfd[2],col=1:4)
plot(result_soroush2$pc_mfd[2,1])
plot(-result_soroush2$pc_mfd[2,1])
plot(-result_soroush2$pc_mfd[4,1])
plot(-result_soroush2$pc_mfd[2,1])
plot(-result_soroush2$pc_mfd[4,1])
plot(result_soroush$pc_mfd[2],col=1:4)
plot(result_soroush$pc_mfd[3],col=1:4)
plot(-result_soroush2$pc_mfd[3,1])
data("spls")
?spls
result_soroush$lsv%*%t(result_soroush$pc_mfd[,1]$eval(seq(0,119,length=1000)))
result_soroush$lsv%*%t(result_soroush$pc_mfd[1]$eval(seq(0,119,length=1000)))
result_soroush$pc_mfd[1]
result_soroush$pc_mfd[,1]
result_soroush$pc_mfd[1]$eval(seq(0,119,length=1000))
plot(result_soroush$pc_mfd[1]$eval(seq(0,119,length=1000)))
t(result_soroush$pc_mfd[1]$eval(seq(0,119,length=1000)))
result_soroush$lsv
dim(t(result_soroush$pc_mfd[1]$eval(seq(0,119,length=1000))))
dim(result_soroush$lsv)
dim(t(result_soroush$pc_mfd$eval(seq(0,119,length=1000))))
result_soroush$lsv%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=1000)))
dim(result_soroush$lsv%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=1000))))
ts.plot(result_soroush$lsv%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=1000))))
ts.plot(t(result_soroush$lsv%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=1000)))))
ts.plot(t(result_soroush$lsv%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=100)))))
ts.plot(t(result_soroush$lsv%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120)))))
# TF vs time
y_reconstruction <- result_soroush$lsv%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120)))
matplot(y_reconstruction)
matplot(y_reconstruction,type="l")
matplot(t(y_reconstruction),type="l")
apply(result_soroush$lsv^2,2,sum)
inprod_mvmfd(result_soroush$pc_mfd,result_soroush$pc_mfd)
?inprod_mvmfd(result_soroush$pc_mfd,result_soroush$pc_mfd)
inprod_mfd(result_soroush$pc_mfd,result_soroush$pc_mfd)
inprod_mfd(result_soroush2$pc_mfd[,1],result_soroush2$pc_mfd[,1])
result_soroush$values
diag(result_soroush$values)
# TF vs time
y_reconstruction <- result_soroush$lsv%*%diag(result_soroush$values)%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120)))
matplot(t(y_reconstruction),type="l")
y
dim(y)
dim(y_reconstruction)
matplot(t(y),type="l")
result_soroush$lsv[,1]
as.matrix(result_soroush$lsv[,1])
result_soroush$lsv[,1][,,drop=FALSE]
result_soroush$lsv[,1]
matrix(result_soroush$lsv[,1])
t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,1])
matrix(t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,1]))
result_soroush$lsv[,1]%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,1])
dim(result_soroush$lsv[,1]%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,1]))
dim(result_soroush$lsv[,1:2]%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,1:2]))
diag(result_soroush$values)
diag(result_soroush$values[1:2])
diag(result_soroush$values[1])
?diag(result_soroush$values[1])
diag(result_soroush$values[1], nrow=mcol=2)
diag(result_soroush$values[1], nrow=ncol=2)
diag(result_soroush$values[1], nrow=2)
diag(result_soroush$values[1:2], nrow=2)
# TF vs time
ind <- 1:4
y_reconstruction <- dim(result_soroush$lsv[,indx]%*%diag(result_soroush$values[indx], nrow=length(indx))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,indx]))
matplot(t(y_reconstruction),type="l") #matplot(t(y),type="l")
# TF vs time
ind <- 1:4
y_reconstruction <- dim(result_soroush$lsv[,ind]%*%diag(result_soroush$values[indx], nrow=length(ind))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,ind]))
# TF vs time
ind <- 1:4
y_reconstruction <- dim(result_soroush$lsv[,ind]%*%diag(result_soroush$values[ind], nrow=length(ind))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,ind]))
matplot(t(y_reconstruction),type="l") #matplot(t(y),type="l")
y_reconstruction <- result_soroush$lsv[,ind]%*%diag(result_soroush$values[ind], nrow=length(ind))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,ind])
matplot(t(y_reconstruction),type="l") #matplot(t(y),type="l")
matplot(t(y_reconstruction),type="l", main=ind) #matplot(t(y),type="l")
matplot(t(y_reconstruction),type="l", main=paste(ind) #matplot(t(y),type="l")
)
matplot(t(y_reconstruction),type="l", main=paste(ind)) #matplot(t(y),type="l")
paste(ind)
cat(ind)
paste0(ind)
ind
paste("adasd", "ads")
ind
char(ind)
as.char(ind)
as.character(ind)
paste(as.character(ind))
paste0(as.character(ind))
paste0(ind, collapse = "")
matplot(t(y_reconstruction),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
# TF vs time
ind <- 1
y_reconstruction <- result_soroush$lsv[,ind]%*%diag(result_soroush$values[ind], nrow=length(ind))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,ind])
matplot(t(y_reconstruction),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
# TF vs time
ind <- 2
y_reconstruction <- result_soroush$lsv[,ind]%*%diag(result_soroush$values[ind], nrow=length(ind))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,ind])
matplot(t(y_reconstruction),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
# TF vs time
ind <- 3
y_reconstruction <- result_soroush$lsv[,ind]%*%diag(result_soroush$values[ind], nrow=length(ind))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,ind])
matplot(t(y_reconstruction),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
# TF vs time
ind <- 4
y_reconstruction <- result_soroush$lsv[,ind]%*%diag(result_soroush$values[ind], nrow=length(ind))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,ind])
matplot(t(y_reconstruction),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
result_soroush$lsv
dim(result_soroush$lsv)
sort(abs(result_soroush$lsv)[,1])
abs(result_soroush$lsv)
abs(result_soroush$lsv)[,1]
sort(abs(result_soroush$lsv)[,1])
sort(abs(result_soroush$lsv)[,1],decreasing = F)
sort(abs(result_soroush$lsv)[,1],decreasing = T)
sort(abs(result_soroush$vector_pc)[,1],decreasing = T)[1:50]
a <- rnorm(10)
a
sort(a)
order(rank(a))
a[rank(a)]
a[order(a)]
sort(a)
a[order(a,decreasing = T)]
order(a,decreasing = T)
sort(abs(result_soroush$vector_pc)[,1],decreasing = T)[1:50]
order(abs(result_soroush$vector_pc)[,1],decreasing = T)
result_soroush$vector_pc[order(abs(result_soroush$vector_pc)[,1],decreasing = T)]
rownames(result_soroush$vector_pc[order(abs(result_soroush$vector_pc)[,1],decreasing = T)])
order(abs(result_soroush$vector_pc)[,1],decreasing = T)
top <- 50; indx <- order(abs(result_soroush$vector_pc)[,1],decreasing = T)[50]
indx
order(abs(result_soroush$vector_pc)[,1],decreasing = T)
top <- 50; indx <- order(abs(result_soroush$vector_pc)[,1],decreasing = T)[1:top]
indx
top <- 50; indx <- order(abs(result_soroush$lsv)[,1],decreasing = T)[1:top]
indx
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
matplot(t(y_reconstruction),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
# TF vs time
indy <- 4
y_reconstruction <- result_soroush$lsv[,indy]%*%diag(result_soroush$values[indy], nrow=length(indy))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,indy])
matplot(t(y_reconstruction),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
top <- 50; indx <- order(abs(result_soroush$lsv)[,1],decreasing = T)[1:top]
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
top <- 50; indx <- order(abs(result_soroush$lsv)[,4],decreasing = T)[1:top]
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
top <- 50; indx <- order(abs(result_soroush$lsv)[,indy],decreasing = T)[1:top]
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
# TF vs time
indy <- 3
y_reconstruction <- result_soroush$lsv[,indy]%*%diag(result_soroush$values[indy], nrow=length(indy))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,indy])
matplot(t(y_reconstruction),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
top <- 50; indx <- order(abs(result_soroush$lsv)[,indy],decreasing = T)[1:top]
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
top <- 50; indx <- order(abs(result_soroush$lsv)[,indy],decreasing = F)[1:top]
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
y_reconstruction <- result_soroush$lsv[,indy]%*%diag(result_soroush$values[indy], nrow=length(indy))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,indy])
matplot(t(y_reconstruction),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
top <- 50; indx <- order(abs(result_soroush$lsv)[,indy],decreasing = F)[1:top]
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(ind, collapse = ","), ylim=range(y_reconstruction)) #matplot(t(y),type="l")
# TF vs time
indy <- 3
y_reconstruction <- result_soroush$lsv[,indy]%*%diag(result_soroush$values[indy], nrow=length(indy))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,indy])
matplot(t(y_reconstruction),type="l", main=paste0(ind, collapse = ",")) #matplot(t(y),type="l")
# TF vs time
indy <- 3
y_reconstruction <- result_soroush$lsv[,indy]%*%diag(result_soroush$values[indy], nrow=length(indy))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,indy])
matplot(t(y_reconstruction),type="l", main=paste0(indy, collapse = ",")) #matplot(t(y),type="l")
top <- 50; indx <- order(abs(result_soroush$lsv)[,indy],decreasing = F)[1:top]
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(indy, collapse = ","), ylim=range(y_reconstruction)) #matplot(t(y),type="l")
top <- 50; indx <- order(abs(result_soroush$lsv)[,indy],decreasing = T)[1:top]
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(indy, collapse = ","), ylim=range(y_reconstruction)) #matplot(t(y),type="l")
abs(result_soroush$lsv)[,indy]
apply(abs(result_soroush$lsv)[,indy],1,sum)
apply(abs(result_soroush$lsv)[,indy,drop=FALSE],1,sum)
abs(result_soroush$lsv)[,indy]
apply(abs(result_soroush$lsv)[,indy,drop=FALSE],1,sum)
apply(abs(result_soroush$lsv)[,3,drop=FALSE],1,sum)
apply(abs(result_soroush$lsv)[,1:3,drop=FALSE],1,sum)
# TF vs time
indy <- 1:2
y_reconstruction <- result_soroush$lsv[,indy]%*%diag(result_soroush$values[indy], nrow=length(indy))%*%t(result_soroush$pc_mfd$eval(seq(0,119,length=120))[,indy])
matplot(t(y_reconstruction),type="l", main=paste0(indy, collapse = ",")) #matplot(t(y),type="l")
top <- 50; indx <- order(apply(abs(result_soroush$lsv)[,indy,drop=FALSE],1,sum),decreasing = T)[1:top]
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(indy, collapse = ","), ylim=range(y_reconstruction)) #matplot(t(y),type="l")
top <- 50; indx <- order(apply(abs(result_soroush$lsv)[,indy,drop=FALSE],1,sum),decreasing = F)[1:top]
matplot(t(y_reconstruction[indx,]),type="l", main=paste0(indy, collapse = ","), ylim=range(y_reconstruction)) #matplot(t(y),type="l")
library(ReMFPCA); library(fda); library(spls)
data(yeast)
dat <- yeast$y
scdat <- 1/sqrt(mean(diag(var(t(dat)))))*t(dat)
matplot(scdat,type="l")
sdat <- svd(scdat); rdat <- sdat$u[,1:4]%*%diag(sdat$d[1:4])%*%t(sdat$v[,1:4])
matplot(rdat,type="l")
r <- 12; t <- c(0, 17)*7
bs <- create.bspline.basis(t, r)
mfd_basis <- basismfd$new(bs)
mfd_dat <- Mfd(seq(t[1],t[2],len=18),scdat,mfd_basis)
mfd_dat
inprod_mfd(mfd_dat )
norm_mfd(mfd_dat)
library(spls)
data("yeast")
?yeast
18*7
17*7
object.size(yeast)
library(spls)
data("yeast")
# ChIP-chip data
x <- yeast$x
# gene expression functional 542 genes and and each column is mrna level measure at each 7 minutes
y <- yeast$y
rm(yeast)
# Create B-spline basis and multivariate functional data (mfd) objects
v1 <- t(y)
scaling_factor_tfunction <- sqrt(mean(diag(var(v1))))
v1 <- 1/sqrt(mean(diag(var(v1))))*v1
nbasis_f <- 10
t0_f <- 0
t1_f <- 119
grid_point <- ncol(y)
t <- seq(t0_f, t1_f, length.out = grid_point)
bspline_basis <- fda::create.bspline.basis(c(t0_f,t1_f),nbasis_f)
mfd_basis <- basismfd$new(bspline_basis)
mfd_v1 <- mfd$new(t,v1,mfd_basis)
mfd_v2 <- mfd$new(t,v1,mfd_basis)
mvmfd_v12 <- Mvmfd(mfd_v1,mfd_v2)
hd_obj1 <- Hd(list(mfd_v1,mfd_v1))
hd_obj1
mvmfd_v12
#vector data
vector_data <- x
scaling_factor_vector <- sqrt(mean(diag(var(vector_data))))
vector_data <- 1/scaling_factor_vector*vector_data
nfd_obj1 <- nfd(vector_data)
nfd_obj2 <- nfd(vector_data)
mvnfd_obj <- Mvnfd(nfd_obj1,nfd_obj2)
hd_obj2 <- Hd(list(mfd_v1,mfd_v1,nfd_obj1))
nfd_obj1
nfd_obj1[]
nfd_obj1[,]
nfd_obj1$data
nfd_obj1$data
unclass(nfd_obj1)
str(nfd_obj1)
str(nfd_obj2)
str(mvnfd_obj)
mvnfd_obj
hd_obj1
hd_obj2
hd_obj3 <- Hd(mfd_v1,nfd_obj1)
hd_obj4 <- Hd(nfd_obj1)
hd_obj5 <- Hd(mfd_v1,mfd_v1,nfd_obj1,nfd_obj1)
hd_obj3
hd_obj4
hd_obj5
hd_obj3
#model
alpha1 <- list(a1 = 2^seq(-10, 3, length.out = 10))
result_soroush <- Mhpca(hd_obj = hd_obj3,method = "power",ncomp = 3,smooth_tuning = alpha1,centerfns = T,alpha_orth = F,smoothing_type = "basispen")
result_soroush_eigen <- Mhpca(hd_obj = hd_obj3,method = "eigen",ncomp = 3,smooth_tuning = alpha1,centerfns = T,smoothing_type = "basispen")
result_soroush_orth <- Mhpca(hd_obj = hd_obj3,method = "power",ncomp = 3,smooth_tuning = alpha1,centerfns = T,alpha_orth = T,smoothing_type = "basispen")
getwd()
setwd("C:/Users/mehdi/Desktop/R Files Export")
2 + 2
dnorm(12, mean = 15, sd = 3)
# generate data from a gamma distribution
data = rgamma(1000, shape = 2)
hist(data)
